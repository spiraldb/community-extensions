from typing import Any, final

import vortex as vx
import vortex.expr as ve

@final
class Expr:
    def __eq__(self, other: ve.IntoExpr) -> Expr: ...  # type: ignore[override]
    def __ne__(self, other: ve.IntoExpr) -> Expr: ...  # type: ignore[override]
    def __lt__(self, other: ve.IntoExpr) -> Expr: ...
    def __le__(self, other: ve.IntoExpr) -> Expr: ...
    def __gt__(self, other: ve.IntoExpr) -> Expr: ...
    def __ge__(self, other: ve.IntoExpr) -> Expr: ...
    def __and__(self, other: ve.IntoExpr) -> Expr: ...
    def __or__(self, other: ve.IntoExpr) -> Expr: ...

def column(name: str) -> Expr: ...
def ident() -> Expr: ...
def literal(dtype: vx.DType, value: Any) -> Expr: ...
