// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: scalar.proto
// Protobuf C++ Version: 5.27.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_scalar_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_scalar_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "dtype.pb.h"
#include "google/protobuf/struct.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_scalar_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_scalar_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_scalar_2eproto;
namespace vortex {
namespace scalar {
class ListValue;
struct ListValueDefaultTypeInternal;
extern ListValueDefaultTypeInternal _ListValue_default_instance_;
class Scalar;
struct ScalarDefaultTypeInternal;
extern ScalarDefaultTypeInternal _Scalar_default_instance_;
class ScalarValue;
struct ScalarValueDefaultTypeInternal;
extern ScalarValueDefaultTypeInternal _ScalarValue_default_instance_;
}  // namespace scalar
}  // namespace vortex
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace vortex {
namespace scalar {

// ===================================================================


// -------------------------------------------------------------------

class ListValue final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:vortex.scalar.ListValue) */ {
 public:
  inline ListValue() : ListValue(nullptr) {}
  ~ListValue() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ListValue(
      ::google::protobuf::internal::ConstantInitialized);

  inline ListValue(const ListValue& from) : ListValue(nullptr, from) {}
  inline ListValue(ListValue&& from) noexcept
      : ListValue(nullptr, std::move(from)) {}
  inline ListValue& operator=(const ListValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListValue& operator=(ListValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListValue* internal_default_instance() {
    return reinterpret_cast<const ListValue*>(
        &_ListValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ListValue& a, ListValue& b) { a.Swap(&b); }
  inline void Swap(ListValue* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListValue* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ListValue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ListValue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ListValue& from) { ListValue::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ListValue* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "vortex.scalar.ListValue"; }

 protected:
  explicit ListValue(::google::protobuf::Arena* arena);
  ListValue(::google::protobuf::Arena* arena, const ListValue& from);
  ListValue(::google::protobuf::Arena* arena, ListValue&& from) noexcept
      : ListValue(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .vortex.scalar.ScalarValue values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  ::vortex::scalar::ScalarValue* mutable_values(int index);
  ::google::protobuf::RepeatedPtrField<::vortex::scalar::ScalarValue>* mutable_values();

  private:
  const ::google::protobuf::RepeatedPtrField<::vortex::scalar::ScalarValue>& _internal_values() const;
  ::google::protobuf::RepeatedPtrField<::vortex::scalar::ScalarValue>* _internal_mutable_values();
  public:
  const ::vortex::scalar::ScalarValue& values(int index) const;
  ::vortex::scalar::ScalarValue* add_values();
  const ::google::protobuf::RepeatedPtrField<::vortex::scalar::ScalarValue>& values() const;
  // @@protoc_insertion_point(class_scope:vortex.scalar.ListValue)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ListValue_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ListValue& from_msg);
    ::google::protobuf::RepeatedPtrField< ::vortex::scalar::ScalarValue > values_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_scalar_2eproto;
};
// -------------------------------------------------------------------

class ScalarValue final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:vortex.scalar.ScalarValue) */ {
 public:
  inline ScalarValue() : ScalarValue(nullptr) {}
  ~ScalarValue() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ScalarValue(
      ::google::protobuf::internal::ConstantInitialized);

  inline ScalarValue(const ScalarValue& from) : ScalarValue(nullptr, from) {}
  inline ScalarValue(ScalarValue&& from) noexcept
      : ScalarValue(nullptr, std::move(from)) {}
  inline ScalarValue& operator=(const ScalarValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarValue& operator=(ScalarValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScalarValue& default_instance() {
    return *internal_default_instance();
  }
  enum KindCase {
    kNullValue = 1,
    kBoolValue = 2,
    kInt8Value = 3,
    kInt16Value = 4,
    kInt32Value = 5,
    kInt64Value = 6,
    kUint8Value = 7,
    kUint16Value = 8,
    kUint32Value = 9,
    kUint64Value = 10,
    kF16Value = 11,
    kF32Value = 12,
    kF64Value = 13,
    kStringValue = 14,
    kBytesValue = 15,
    kListValue = 16,
    KIND_NOT_SET = 0,
  };
  static inline const ScalarValue* internal_default_instance() {
    return reinterpret_cast<const ScalarValue*>(
        &_ScalarValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ScalarValue& a, ScalarValue& b) { a.Swap(&b); }
  inline void Swap(ScalarValue* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScalarValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScalarValue* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ScalarValue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ScalarValue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ScalarValue& from) { ScalarValue::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ScalarValue* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "vortex.scalar.ScalarValue"; }

 protected:
  explicit ScalarValue(::google::protobuf::Arena* arena);
  ScalarValue(::google::protobuf::Arena* arena, const ScalarValue& from);
  ScalarValue(::google::protobuf::Arena* arena, ScalarValue&& from) noexcept
      : ScalarValue(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNullValueFieldNumber = 1,
    kBoolValueFieldNumber = 2,
    kInt8ValueFieldNumber = 3,
    kInt16ValueFieldNumber = 4,
    kInt32ValueFieldNumber = 5,
    kInt64ValueFieldNumber = 6,
    kUint8ValueFieldNumber = 7,
    kUint16ValueFieldNumber = 8,
    kUint32ValueFieldNumber = 9,
    kUint64ValueFieldNumber = 10,
    kF16ValueFieldNumber = 11,
    kF32ValueFieldNumber = 12,
    kF64ValueFieldNumber = 13,
    kStringValueFieldNumber = 14,
    kBytesValueFieldNumber = 15,
    kListValueFieldNumber = 16,
  };
  // .google.protobuf.NullValue null_value = 1;
  bool has_null_value() const;
  void clear_null_value() ;
  ::google::protobuf::NullValue null_value() const;
  void set_null_value(::google::protobuf::NullValue value);

  private:
  ::google::protobuf::NullValue _internal_null_value() const;
  void _internal_set_null_value(::google::protobuf::NullValue value);

  public:
  // bool bool_value = 2;
  bool has_bool_value() const;
  void clear_bool_value() ;
  bool bool_value() const;
  void set_bool_value(bool value);

  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);

  public:
  // sint32 int8_value = 3;
  bool has_int8_value() const;
  void clear_int8_value() ;
  ::int32_t int8_value() const;
  void set_int8_value(::int32_t value);

  private:
  ::int32_t _internal_int8_value() const;
  void _internal_set_int8_value(::int32_t value);

  public:
  // sint32 int16_value = 4;
  bool has_int16_value() const;
  void clear_int16_value() ;
  ::int32_t int16_value() const;
  void set_int16_value(::int32_t value);

  private:
  ::int32_t _internal_int16_value() const;
  void _internal_set_int16_value(::int32_t value);

  public:
  // sint32 int32_value = 5;
  bool has_int32_value() const;
  void clear_int32_value() ;
  ::int32_t int32_value() const;
  void set_int32_value(::int32_t value);

  private:
  ::int32_t _internal_int32_value() const;
  void _internal_set_int32_value(::int32_t value);

  public:
  // sint64 int64_value = 6;
  bool has_int64_value() const;
  void clear_int64_value() ;
  ::int64_t int64_value() const;
  void set_int64_value(::int64_t value);

  private:
  ::int64_t _internal_int64_value() const;
  void _internal_set_int64_value(::int64_t value);

  public:
  // uint32 uint8_value = 7;
  bool has_uint8_value() const;
  void clear_uint8_value() ;
  ::uint32_t uint8_value() const;
  void set_uint8_value(::uint32_t value);

  private:
  ::uint32_t _internal_uint8_value() const;
  void _internal_set_uint8_value(::uint32_t value);

  public:
  // uint32 uint16_value = 8;
  bool has_uint16_value() const;
  void clear_uint16_value() ;
  ::uint32_t uint16_value() const;
  void set_uint16_value(::uint32_t value);

  private:
  ::uint32_t _internal_uint16_value() const;
  void _internal_set_uint16_value(::uint32_t value);

  public:
  // uint32 uint32_value = 9;
  bool has_uint32_value() const;
  void clear_uint32_value() ;
  ::uint32_t uint32_value() const;
  void set_uint32_value(::uint32_t value);

  private:
  ::uint32_t _internal_uint32_value() const;
  void _internal_set_uint32_value(::uint32_t value);

  public:
  // uint64 uint64_value = 10;
  bool has_uint64_value() const;
  void clear_uint64_value() ;
  ::uint64_t uint64_value() const;
  void set_uint64_value(::uint64_t value);

  private:
  ::uint64_t _internal_uint64_value() const;
  void _internal_set_uint64_value(::uint64_t value);

  public:
  // uint32 f16_value = 11;
  bool has_f16_value() const;
  void clear_f16_value() ;
  ::uint32_t f16_value() const;
  void set_f16_value(::uint32_t value);

  private:
  ::uint32_t _internal_f16_value() const;
  void _internal_set_f16_value(::uint32_t value);

  public:
  // float f32_value = 12;
  bool has_f32_value() const;
  void clear_f32_value() ;
  float f32_value() const;
  void set_f32_value(float value);

  private:
  float _internal_f32_value() const;
  void _internal_set_f32_value(float value);

  public:
  // double f64_value = 13;
  bool has_f64_value() const;
  void clear_f64_value() ;
  double f64_value() const;
  void set_f64_value(double value);

  private:
  double _internal_f64_value() const;
  void _internal_set_f64_value(double value);

  public:
  // string string_value = 14;
  bool has_string_value() const;
  void clear_string_value() ;
  const std::string& string_value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_string_value(Arg_&& arg, Args_... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* value);

  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(
      const std::string& value);
  std::string* _internal_mutable_string_value();

  public:
  // bytes bytes_value = 15;
  bool has_bytes_value() const;
  void clear_bytes_value() ;
  const std::string& bytes_value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bytes_value(Arg_&& arg, Args_... args);
  std::string* mutable_bytes_value();
  PROTOBUF_NODISCARD std::string* release_bytes_value();
  void set_allocated_bytes_value(std::string* value);

  private:
  const std::string& _internal_bytes_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes_value(
      const std::string& value);
  std::string* _internal_mutable_bytes_value();

  public:
  // .vortex.scalar.ListValue list_value = 16;
  bool has_list_value() const;
  private:
  bool _internal_has_list_value() const;

  public:
  void clear_list_value() ;
  const ::vortex::scalar::ListValue& list_value() const;
  PROTOBUF_NODISCARD ::vortex::scalar::ListValue* release_list_value();
  ::vortex::scalar::ListValue* mutable_list_value();
  void set_allocated_list_value(::vortex::scalar::ListValue* value);
  void unsafe_arena_set_allocated_list_value(::vortex::scalar::ListValue* value);
  ::vortex::scalar::ListValue* unsafe_arena_release_list_value();

  private:
  const ::vortex::scalar::ListValue& _internal_list_value() const;
  ::vortex::scalar::ListValue* _internal_mutable_list_value();

  public:
  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:vortex.scalar.ScalarValue)
 private:
  class _Internal;
  void set_has_null_value();
  void set_has_bool_value();
  void set_has_int8_value();
  void set_has_int16_value();
  void set_has_int32_value();
  void set_has_int64_value();
  void set_has_uint8_value();
  void set_has_uint16_value();
  void set_has_uint32_value();
  void set_has_uint64_value();
  void set_has_f16_value();
  void set_has_f32_value();
  void set_has_f64_value();
  void set_has_string_value();
  void set_has_bytes_value();
  void set_has_list_value();
  inline bool has_kind() const;
  inline void clear_has_kind();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 16, 1,
      62, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ScalarValue_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ScalarValue& from_msg);
    union KindUnion {
      constexpr KindUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      int null_value_;
      bool bool_value_;
      ::int32_t int8_value_;
      ::int32_t int16_value_;
      ::int32_t int32_value_;
      ::int64_t int64_value_;
      ::uint32_t uint8_value_;
      ::uint32_t uint16_value_;
      ::uint32_t uint32_value_;
      ::uint64_t uint64_value_;
      ::uint32_t f16_value_;
      float f32_value_;
      double f64_value_;
      ::google::protobuf::internal::ArenaStringPtr string_value_;
      ::google::protobuf::internal::ArenaStringPtr bytes_value_;
      ::vortex::scalar::ListValue* list_value_;
    } kind_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_scalar_2eproto;
};
// -------------------------------------------------------------------

class Scalar final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:vortex.scalar.Scalar) */ {
 public:
  inline Scalar() : Scalar(nullptr) {}
  ~Scalar() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Scalar(
      ::google::protobuf::internal::ConstantInitialized);

  inline Scalar(const Scalar& from) : Scalar(nullptr, from) {}
  inline Scalar(Scalar&& from) noexcept
      : Scalar(nullptr, std::move(from)) {}
  inline Scalar& operator=(const Scalar& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scalar& operator=(Scalar&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Scalar& default_instance() {
    return *internal_default_instance();
  }
  static inline const Scalar* internal_default_instance() {
    return reinterpret_cast<const Scalar*>(
        &_Scalar_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Scalar& a, Scalar& b) { a.Swap(&b); }
  inline void Swap(Scalar* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scalar* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Scalar* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Scalar>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Scalar& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Scalar& from) { Scalar::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Scalar* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "vortex.scalar.Scalar"; }

 protected:
  explicit Scalar(::google::protobuf::Arena* arena);
  Scalar(::google::protobuf::Arena* arena, const Scalar& from);
  Scalar(::google::protobuf::Arena* arena, Scalar&& from) noexcept
      : Scalar(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDtypeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // .vortex.dtype.DType dtype = 1;
  bool has_dtype() const;
  void clear_dtype() ;
  const ::vortex::dtype::DType& dtype() const;
  PROTOBUF_NODISCARD ::vortex::dtype::DType* release_dtype();
  ::vortex::dtype::DType* mutable_dtype();
  void set_allocated_dtype(::vortex::dtype::DType* value);
  void unsafe_arena_set_allocated_dtype(::vortex::dtype::DType* value);
  ::vortex::dtype::DType* unsafe_arena_release_dtype();

  private:
  const ::vortex::dtype::DType& _internal_dtype() const;
  ::vortex::dtype::DType* _internal_mutable_dtype();

  public:
  // .vortex.scalar.ScalarValue value = 2;
  bool has_value() const;
  void clear_value() ;
  const ::vortex::scalar::ScalarValue& value() const;
  PROTOBUF_NODISCARD ::vortex::scalar::ScalarValue* release_value();
  ::vortex::scalar::ScalarValue* mutable_value();
  void set_allocated_value(::vortex::scalar::ScalarValue* value);
  void unsafe_arena_set_allocated_value(::vortex::scalar::ScalarValue* value);
  ::vortex::scalar::ScalarValue* unsafe_arena_release_value();

  private:
  const ::vortex::scalar::ScalarValue& _internal_value() const;
  ::vortex::scalar::ScalarValue* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:vortex.scalar.Scalar)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Scalar_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Scalar& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::vortex::dtype::DType* dtype_;
    ::vortex::scalar::ScalarValue* value_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_scalar_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Scalar

// .vortex.dtype.DType dtype = 1;
inline bool Scalar::has_dtype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dtype_ != nullptr);
  return value;
}
inline const ::vortex::dtype::DType& Scalar::_internal_dtype() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::vortex::dtype::DType* p = _impl_.dtype_;
  return p != nullptr ? *p : reinterpret_cast<const ::vortex::dtype::DType&>(::vortex::dtype::_DType_default_instance_);
}
inline const ::vortex::dtype::DType& Scalar::dtype() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vortex.scalar.Scalar.dtype)
  return _internal_dtype();
}
inline void Scalar::unsafe_arena_set_allocated_dtype(::vortex::dtype::DType* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dtype_);
  }
  _impl_.dtype_ = reinterpret_cast<::vortex::dtype::DType*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vortex.scalar.Scalar.dtype)
}
inline ::vortex::dtype::DType* Scalar::release_dtype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::vortex::dtype::DType* released = _impl_.dtype_;
  _impl_.dtype_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::vortex::dtype::DType* Scalar::unsafe_arena_release_dtype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:vortex.scalar.Scalar.dtype)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::vortex::dtype::DType* temp = _impl_.dtype_;
  _impl_.dtype_ = nullptr;
  return temp;
}
inline ::vortex::dtype::DType* Scalar::_internal_mutable_dtype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dtype_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::vortex::dtype::DType>(GetArena());
    _impl_.dtype_ = reinterpret_cast<::vortex::dtype::DType*>(p);
  }
  return _impl_.dtype_;
}
inline ::vortex::dtype::DType* Scalar::mutable_dtype() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::vortex::dtype::DType* _msg = _internal_mutable_dtype();
  // @@protoc_insertion_point(field_mutable:vortex.scalar.Scalar.dtype)
  return _msg;
}
inline void Scalar::set_allocated_dtype(::vortex::dtype::DType* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dtype_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.dtype_ = reinterpret_cast<::vortex::dtype::DType*>(value);
  // @@protoc_insertion_point(field_set_allocated:vortex.scalar.Scalar.dtype)
}

// .vortex.scalar.ScalarValue value = 2;
inline bool Scalar::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_ != nullptr);
  return value;
}
inline void Scalar::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.value_ != nullptr) _impl_.value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::vortex::scalar::ScalarValue& Scalar::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::vortex::scalar::ScalarValue* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::vortex::scalar::ScalarValue&>(::vortex::scalar::_ScalarValue_default_instance_);
}
inline const ::vortex::scalar::ScalarValue& Scalar::value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vortex.scalar.Scalar.value)
  return _internal_value();
}
inline void Scalar::unsafe_arena_set_allocated_value(::vortex::scalar::ScalarValue* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = reinterpret_cast<::vortex::scalar::ScalarValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vortex.scalar.Scalar.value)
}
inline ::vortex::scalar::ScalarValue* Scalar::release_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::vortex::scalar::ScalarValue* released = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::vortex::scalar::ScalarValue* Scalar::unsafe_arena_release_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:vortex.scalar.Scalar.value)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::vortex::scalar::ScalarValue* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::vortex::scalar::ScalarValue* Scalar::_internal_mutable_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.value_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::vortex::scalar::ScalarValue>(GetArena());
    _impl_.value_ = reinterpret_cast<::vortex::scalar::ScalarValue*>(p);
  }
  return _impl_.value_;
}
inline ::vortex::scalar::ScalarValue* Scalar::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::vortex::scalar::ScalarValue* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:vortex.scalar.Scalar.value)
  return _msg;
}
inline void Scalar::set_allocated_value(::vortex::scalar::ScalarValue* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.value_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.value_ = reinterpret_cast<::vortex::scalar::ScalarValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:vortex.scalar.Scalar.value)
}

// -------------------------------------------------------------------

// ScalarValue

// .google.protobuf.NullValue null_value = 1;
inline bool ScalarValue::has_null_value() const {
  return kind_case() == kNullValue;
}
inline void ScalarValue::set_has_null_value() {
  _impl_._oneof_case_[0] = kNullValue;
}
inline void ScalarValue::clear_null_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (kind_case() == kNullValue) {
    _impl_.kind_.null_value_ = 0;
    clear_has_kind();
  }
}
inline ::google::protobuf::NullValue ScalarValue::null_value() const {
  // @@protoc_insertion_point(field_get:vortex.scalar.ScalarValue.null_value)
  return _internal_null_value();
}
inline void ScalarValue::set_null_value(::google::protobuf::NullValue value) {
  if (kind_case() != kNullValue) {
    clear_kind();
    set_has_null_value();
  }
  _impl_.kind_.null_value_ = value;
  // @@protoc_insertion_point(field_set:vortex.scalar.ScalarValue.null_value)
}
inline ::google::protobuf::NullValue ScalarValue::_internal_null_value() const {
  if (kind_case() == kNullValue) {
    return static_cast<::google::protobuf::NullValue>(_impl_.kind_.null_value_);
  }
  return static_cast<::google::protobuf::NullValue>(0);
}

// bool bool_value = 2;
inline bool ScalarValue::has_bool_value() const {
  return kind_case() == kBoolValue;
}
inline void ScalarValue::set_has_bool_value() {
  _impl_._oneof_case_[0] = kBoolValue;
}
inline void ScalarValue::clear_bool_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (kind_case() == kBoolValue) {
    _impl_.kind_.bool_value_ = false;
    clear_has_kind();
  }
}
inline bool ScalarValue::bool_value() const {
  // @@protoc_insertion_point(field_get:vortex.scalar.ScalarValue.bool_value)
  return _internal_bool_value();
}
inline void ScalarValue::set_bool_value(bool value) {
  if (kind_case() != kBoolValue) {
    clear_kind();
    set_has_bool_value();
  }
  _impl_.kind_.bool_value_ = value;
  // @@protoc_insertion_point(field_set:vortex.scalar.ScalarValue.bool_value)
}
inline bool ScalarValue::_internal_bool_value() const {
  if (kind_case() == kBoolValue) {
    return _impl_.kind_.bool_value_;
  }
  return false;
}

// sint32 int8_value = 3;
inline bool ScalarValue::has_int8_value() const {
  return kind_case() == kInt8Value;
}
inline void ScalarValue::set_has_int8_value() {
  _impl_._oneof_case_[0] = kInt8Value;
}
inline void ScalarValue::clear_int8_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (kind_case() == kInt8Value) {
    _impl_.kind_.int8_value_ = 0;
    clear_has_kind();
  }
}
inline ::int32_t ScalarValue::int8_value() const {
  // @@protoc_insertion_point(field_get:vortex.scalar.ScalarValue.int8_value)
  return _internal_int8_value();
}
inline void ScalarValue::set_int8_value(::int32_t value) {
  if (kind_case() != kInt8Value) {
    clear_kind();
    set_has_int8_value();
  }
  _impl_.kind_.int8_value_ = value;
  // @@protoc_insertion_point(field_set:vortex.scalar.ScalarValue.int8_value)
}
inline ::int32_t ScalarValue::_internal_int8_value() const {
  if (kind_case() == kInt8Value) {
    return _impl_.kind_.int8_value_;
  }
  return 0;
}

// sint32 int16_value = 4;
inline bool ScalarValue::has_int16_value() const {
  return kind_case() == kInt16Value;
}
inline void ScalarValue::set_has_int16_value() {
  _impl_._oneof_case_[0] = kInt16Value;
}
inline void ScalarValue::clear_int16_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (kind_case() == kInt16Value) {
    _impl_.kind_.int16_value_ = 0;
    clear_has_kind();
  }
}
inline ::int32_t ScalarValue::int16_value() const {
  // @@protoc_insertion_point(field_get:vortex.scalar.ScalarValue.int16_value)
  return _internal_int16_value();
}
inline void ScalarValue::set_int16_value(::int32_t value) {
  if (kind_case() != kInt16Value) {
    clear_kind();
    set_has_int16_value();
  }
  _impl_.kind_.int16_value_ = value;
  // @@protoc_insertion_point(field_set:vortex.scalar.ScalarValue.int16_value)
}
inline ::int32_t ScalarValue::_internal_int16_value() const {
  if (kind_case() == kInt16Value) {
    return _impl_.kind_.int16_value_;
  }
  return 0;
}

// sint32 int32_value = 5;
inline bool ScalarValue::has_int32_value() const {
  return kind_case() == kInt32Value;
}
inline void ScalarValue::set_has_int32_value() {
  _impl_._oneof_case_[0] = kInt32Value;
}
inline void ScalarValue::clear_int32_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (kind_case() == kInt32Value) {
    _impl_.kind_.int32_value_ = 0;
    clear_has_kind();
  }
}
inline ::int32_t ScalarValue::int32_value() const {
  // @@protoc_insertion_point(field_get:vortex.scalar.ScalarValue.int32_value)
  return _internal_int32_value();
}
inline void ScalarValue::set_int32_value(::int32_t value) {
  if (kind_case() != kInt32Value) {
    clear_kind();
    set_has_int32_value();
  }
  _impl_.kind_.int32_value_ = value;
  // @@protoc_insertion_point(field_set:vortex.scalar.ScalarValue.int32_value)
}
inline ::int32_t ScalarValue::_internal_int32_value() const {
  if (kind_case() == kInt32Value) {
    return _impl_.kind_.int32_value_;
  }
  return 0;
}

// sint64 int64_value = 6;
inline bool ScalarValue::has_int64_value() const {
  return kind_case() == kInt64Value;
}
inline void ScalarValue::set_has_int64_value() {
  _impl_._oneof_case_[0] = kInt64Value;
}
inline void ScalarValue::clear_int64_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (kind_case() == kInt64Value) {
    _impl_.kind_.int64_value_ = ::int64_t{0};
    clear_has_kind();
  }
}
inline ::int64_t ScalarValue::int64_value() const {
  // @@protoc_insertion_point(field_get:vortex.scalar.ScalarValue.int64_value)
  return _internal_int64_value();
}
inline void ScalarValue::set_int64_value(::int64_t value) {
  if (kind_case() != kInt64Value) {
    clear_kind();
    set_has_int64_value();
  }
  _impl_.kind_.int64_value_ = value;
  // @@protoc_insertion_point(field_set:vortex.scalar.ScalarValue.int64_value)
}
inline ::int64_t ScalarValue::_internal_int64_value() const {
  if (kind_case() == kInt64Value) {
    return _impl_.kind_.int64_value_;
  }
  return ::int64_t{0};
}

// uint32 uint8_value = 7;
inline bool ScalarValue::has_uint8_value() const {
  return kind_case() == kUint8Value;
}
inline void ScalarValue::set_has_uint8_value() {
  _impl_._oneof_case_[0] = kUint8Value;
}
inline void ScalarValue::clear_uint8_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (kind_case() == kUint8Value) {
    _impl_.kind_.uint8_value_ = 0u;
    clear_has_kind();
  }
}
inline ::uint32_t ScalarValue::uint8_value() const {
  // @@protoc_insertion_point(field_get:vortex.scalar.ScalarValue.uint8_value)
  return _internal_uint8_value();
}
inline void ScalarValue::set_uint8_value(::uint32_t value) {
  if (kind_case() != kUint8Value) {
    clear_kind();
    set_has_uint8_value();
  }
  _impl_.kind_.uint8_value_ = value;
  // @@protoc_insertion_point(field_set:vortex.scalar.ScalarValue.uint8_value)
}
inline ::uint32_t ScalarValue::_internal_uint8_value() const {
  if (kind_case() == kUint8Value) {
    return _impl_.kind_.uint8_value_;
  }
  return 0u;
}

// uint32 uint16_value = 8;
inline bool ScalarValue::has_uint16_value() const {
  return kind_case() == kUint16Value;
}
inline void ScalarValue::set_has_uint16_value() {
  _impl_._oneof_case_[0] = kUint16Value;
}
inline void ScalarValue::clear_uint16_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (kind_case() == kUint16Value) {
    _impl_.kind_.uint16_value_ = 0u;
    clear_has_kind();
  }
}
inline ::uint32_t ScalarValue::uint16_value() const {
  // @@protoc_insertion_point(field_get:vortex.scalar.ScalarValue.uint16_value)
  return _internal_uint16_value();
}
inline void ScalarValue::set_uint16_value(::uint32_t value) {
  if (kind_case() != kUint16Value) {
    clear_kind();
    set_has_uint16_value();
  }
  _impl_.kind_.uint16_value_ = value;
  // @@protoc_insertion_point(field_set:vortex.scalar.ScalarValue.uint16_value)
}
inline ::uint32_t ScalarValue::_internal_uint16_value() const {
  if (kind_case() == kUint16Value) {
    return _impl_.kind_.uint16_value_;
  }
  return 0u;
}

// uint32 uint32_value = 9;
inline bool ScalarValue::has_uint32_value() const {
  return kind_case() == kUint32Value;
}
inline void ScalarValue::set_has_uint32_value() {
  _impl_._oneof_case_[0] = kUint32Value;
}
inline void ScalarValue::clear_uint32_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (kind_case() == kUint32Value) {
    _impl_.kind_.uint32_value_ = 0u;
    clear_has_kind();
  }
}
inline ::uint32_t ScalarValue::uint32_value() const {
  // @@protoc_insertion_point(field_get:vortex.scalar.ScalarValue.uint32_value)
  return _internal_uint32_value();
}
inline void ScalarValue::set_uint32_value(::uint32_t value) {
  if (kind_case() != kUint32Value) {
    clear_kind();
    set_has_uint32_value();
  }
  _impl_.kind_.uint32_value_ = value;
  // @@protoc_insertion_point(field_set:vortex.scalar.ScalarValue.uint32_value)
}
inline ::uint32_t ScalarValue::_internal_uint32_value() const {
  if (kind_case() == kUint32Value) {
    return _impl_.kind_.uint32_value_;
  }
  return 0u;
}

// uint64 uint64_value = 10;
inline bool ScalarValue::has_uint64_value() const {
  return kind_case() == kUint64Value;
}
inline void ScalarValue::set_has_uint64_value() {
  _impl_._oneof_case_[0] = kUint64Value;
}
inline void ScalarValue::clear_uint64_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (kind_case() == kUint64Value) {
    _impl_.kind_.uint64_value_ = ::uint64_t{0u};
    clear_has_kind();
  }
}
inline ::uint64_t ScalarValue::uint64_value() const {
  // @@protoc_insertion_point(field_get:vortex.scalar.ScalarValue.uint64_value)
  return _internal_uint64_value();
}
inline void ScalarValue::set_uint64_value(::uint64_t value) {
  if (kind_case() != kUint64Value) {
    clear_kind();
    set_has_uint64_value();
  }
  _impl_.kind_.uint64_value_ = value;
  // @@protoc_insertion_point(field_set:vortex.scalar.ScalarValue.uint64_value)
}
inline ::uint64_t ScalarValue::_internal_uint64_value() const {
  if (kind_case() == kUint64Value) {
    return _impl_.kind_.uint64_value_;
  }
  return ::uint64_t{0u};
}

// uint32 f16_value = 11;
inline bool ScalarValue::has_f16_value() const {
  return kind_case() == kF16Value;
}
inline void ScalarValue::set_has_f16_value() {
  _impl_._oneof_case_[0] = kF16Value;
}
inline void ScalarValue::clear_f16_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (kind_case() == kF16Value) {
    _impl_.kind_.f16_value_ = 0u;
    clear_has_kind();
  }
}
inline ::uint32_t ScalarValue::f16_value() const {
  // @@protoc_insertion_point(field_get:vortex.scalar.ScalarValue.f16_value)
  return _internal_f16_value();
}
inline void ScalarValue::set_f16_value(::uint32_t value) {
  if (kind_case() != kF16Value) {
    clear_kind();
    set_has_f16_value();
  }
  _impl_.kind_.f16_value_ = value;
  // @@protoc_insertion_point(field_set:vortex.scalar.ScalarValue.f16_value)
}
inline ::uint32_t ScalarValue::_internal_f16_value() const {
  if (kind_case() == kF16Value) {
    return _impl_.kind_.f16_value_;
  }
  return 0u;
}

// float f32_value = 12;
inline bool ScalarValue::has_f32_value() const {
  return kind_case() == kF32Value;
}
inline void ScalarValue::set_has_f32_value() {
  _impl_._oneof_case_[0] = kF32Value;
}
inline void ScalarValue::clear_f32_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (kind_case() == kF32Value) {
    _impl_.kind_.f32_value_ = 0;
    clear_has_kind();
  }
}
inline float ScalarValue::f32_value() const {
  // @@protoc_insertion_point(field_get:vortex.scalar.ScalarValue.f32_value)
  return _internal_f32_value();
}
inline void ScalarValue::set_f32_value(float value) {
  if (kind_case() != kF32Value) {
    clear_kind();
    set_has_f32_value();
  }
  _impl_.kind_.f32_value_ = value;
  // @@protoc_insertion_point(field_set:vortex.scalar.ScalarValue.f32_value)
}
inline float ScalarValue::_internal_f32_value() const {
  if (kind_case() == kF32Value) {
    return _impl_.kind_.f32_value_;
  }
  return 0;
}

// double f64_value = 13;
inline bool ScalarValue::has_f64_value() const {
  return kind_case() == kF64Value;
}
inline void ScalarValue::set_has_f64_value() {
  _impl_._oneof_case_[0] = kF64Value;
}
inline void ScalarValue::clear_f64_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (kind_case() == kF64Value) {
    _impl_.kind_.f64_value_ = 0;
    clear_has_kind();
  }
}
inline double ScalarValue::f64_value() const {
  // @@protoc_insertion_point(field_get:vortex.scalar.ScalarValue.f64_value)
  return _internal_f64_value();
}
inline void ScalarValue::set_f64_value(double value) {
  if (kind_case() != kF64Value) {
    clear_kind();
    set_has_f64_value();
  }
  _impl_.kind_.f64_value_ = value;
  // @@protoc_insertion_point(field_set:vortex.scalar.ScalarValue.f64_value)
}
inline double ScalarValue::_internal_f64_value() const {
  if (kind_case() == kF64Value) {
    return _impl_.kind_.f64_value_;
  }
  return 0;
}

// string string_value = 14;
inline bool ScalarValue::has_string_value() const {
  return kind_case() == kStringValue;
}
inline void ScalarValue::set_has_string_value() {
  _impl_._oneof_case_[0] = kStringValue;
}
inline void ScalarValue::clear_string_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (kind_case() == kStringValue) {
    _impl_.kind_.string_value_.Destroy();
    clear_has_kind();
  }
}
inline const std::string& ScalarValue::string_value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vortex.scalar.ScalarValue.string_value)
  return _internal_string_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ScalarValue::set_string_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (kind_case() != kStringValue) {
    clear_kind();

    set_has_string_value();
    _impl_.kind_.string_value_.InitDefault();
  }
  _impl_.kind_.string_value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:vortex.scalar.ScalarValue.string_value)
}
inline std::string* ScalarValue::mutable_string_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:vortex.scalar.ScalarValue.string_value)
  return _s;
}
inline const std::string& ScalarValue::_internal_string_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (kind_case() != kStringValue) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.kind_.string_value_.Get();
}
inline void ScalarValue::_internal_set_string_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (kind_case() != kStringValue) {
    clear_kind();

    set_has_string_value();
    _impl_.kind_.string_value_.InitDefault();
  }
  _impl_.kind_.string_value_.Set(value, GetArena());
}
inline std::string* ScalarValue::_internal_mutable_string_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (kind_case() != kStringValue) {
    clear_kind();

    set_has_string_value();
    _impl_.kind_.string_value_.InitDefault();
  }
  return _impl_.kind_.string_value_.Mutable( GetArena());
}
inline std::string* ScalarValue::release_string_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:vortex.scalar.ScalarValue.string_value)
  if (kind_case() != kStringValue) {
    return nullptr;
  }
  clear_has_kind();
  return _impl_.kind_.string_value_.Release();
}
inline void ScalarValue::set_allocated_string_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_kind()) {
    clear_kind();
  }
  if (value != nullptr) {
    set_has_string_value();
    _impl_.kind_.string_value_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:vortex.scalar.ScalarValue.string_value)
}

// bytes bytes_value = 15;
inline bool ScalarValue::has_bytes_value() const {
  return kind_case() == kBytesValue;
}
inline void ScalarValue::set_has_bytes_value() {
  _impl_._oneof_case_[0] = kBytesValue;
}
inline void ScalarValue::clear_bytes_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (kind_case() == kBytesValue) {
    _impl_.kind_.bytes_value_.Destroy();
    clear_has_kind();
  }
}
inline const std::string& ScalarValue::bytes_value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vortex.scalar.ScalarValue.bytes_value)
  return _internal_bytes_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ScalarValue::set_bytes_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (kind_case() != kBytesValue) {
    clear_kind();

    set_has_bytes_value();
    _impl_.kind_.bytes_value_.InitDefault();
  }
  _impl_.kind_.bytes_value_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:vortex.scalar.ScalarValue.bytes_value)
}
inline std::string* ScalarValue::mutable_bytes_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_bytes_value();
  // @@protoc_insertion_point(field_mutable:vortex.scalar.ScalarValue.bytes_value)
  return _s;
}
inline const std::string& ScalarValue::_internal_bytes_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (kind_case() != kBytesValue) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.kind_.bytes_value_.Get();
}
inline void ScalarValue::_internal_set_bytes_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (kind_case() != kBytesValue) {
    clear_kind();

    set_has_bytes_value();
    _impl_.kind_.bytes_value_.InitDefault();
  }
  _impl_.kind_.bytes_value_.Set(value, GetArena());
}
inline std::string* ScalarValue::_internal_mutable_bytes_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (kind_case() != kBytesValue) {
    clear_kind();

    set_has_bytes_value();
    _impl_.kind_.bytes_value_.InitDefault();
  }
  return _impl_.kind_.bytes_value_.Mutable( GetArena());
}
inline std::string* ScalarValue::release_bytes_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:vortex.scalar.ScalarValue.bytes_value)
  if (kind_case() != kBytesValue) {
    return nullptr;
  }
  clear_has_kind();
  return _impl_.kind_.bytes_value_.Release();
}
inline void ScalarValue::set_allocated_bytes_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_kind()) {
    clear_kind();
  }
  if (value != nullptr) {
    set_has_bytes_value();
    _impl_.kind_.bytes_value_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:vortex.scalar.ScalarValue.bytes_value)
}

// .vortex.scalar.ListValue list_value = 16;
inline bool ScalarValue::has_list_value() const {
  return kind_case() == kListValue;
}
inline bool ScalarValue::_internal_has_list_value() const {
  return kind_case() == kListValue;
}
inline void ScalarValue::set_has_list_value() {
  _impl_._oneof_case_[0] = kListValue;
}
inline void ScalarValue::clear_list_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (kind_case() == kListValue) {
    if (GetArena() == nullptr) {
      delete _impl_.kind_.list_value_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.kind_.list_value_);
    }
    clear_has_kind();
  }
}
inline ::vortex::scalar::ListValue* ScalarValue::release_list_value() {
  // @@protoc_insertion_point(field_release:vortex.scalar.ScalarValue.list_value)
  if (kind_case() == kListValue) {
    clear_has_kind();
    auto* temp = _impl_.kind_.list_value_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.list_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vortex::scalar::ListValue& ScalarValue::_internal_list_value() const {
  return kind_case() == kListValue ? *_impl_.kind_.list_value_ : reinterpret_cast<::vortex::scalar::ListValue&>(::vortex::scalar::_ListValue_default_instance_);
}
inline const ::vortex::scalar::ListValue& ScalarValue::list_value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vortex.scalar.ScalarValue.list_value)
  return _internal_list_value();
}
inline ::vortex::scalar::ListValue* ScalarValue::unsafe_arena_release_list_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vortex.scalar.ScalarValue.list_value)
  if (kind_case() == kListValue) {
    clear_has_kind();
    auto* temp = _impl_.kind_.list_value_;
    _impl_.kind_.list_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ScalarValue::unsafe_arena_set_allocated_list_value(::vortex::scalar::ListValue* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_kind();
  if (value) {
    set_has_list_value();
    _impl_.kind_.list_value_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vortex.scalar.ScalarValue.list_value)
}
inline ::vortex::scalar::ListValue* ScalarValue::_internal_mutable_list_value() {
  if (kind_case() != kListValue) {
    clear_kind();
    set_has_list_value();
    _impl_.kind_.list_value_ =
        ::google::protobuf::Message::DefaultConstruct<::vortex::scalar::ListValue>(GetArena());
  }
  return _impl_.kind_.list_value_;
}
inline ::vortex::scalar::ListValue* ScalarValue::mutable_list_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::vortex::scalar::ListValue* _msg = _internal_mutable_list_value();
  // @@protoc_insertion_point(field_mutable:vortex.scalar.ScalarValue.list_value)
  return _msg;
}

inline bool ScalarValue::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void ScalarValue::clear_has_kind() {
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}
inline ScalarValue::KindCase ScalarValue::kind_case() const {
  return ScalarValue::KindCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ListValue

// repeated .vortex.scalar.ScalarValue values = 1;
inline int ListValue::_internal_values_size() const {
  return _internal_values().size();
}
inline int ListValue::values_size() const {
  return _internal_values_size();
}
inline void ListValue::clear_values() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.values_.Clear();
}
inline ::vortex::scalar::ScalarValue* ListValue::mutable_values(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:vortex.scalar.ListValue.values)
  return _internal_mutable_values()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::vortex::scalar::ScalarValue>* ListValue::mutable_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:vortex.scalar.ListValue.values)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_values();
}
inline const ::vortex::scalar::ScalarValue& ListValue::values(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vortex.scalar.ListValue.values)
  return _internal_values().Get(index);
}
inline ::vortex::scalar::ScalarValue* ListValue::add_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::vortex::scalar::ScalarValue* _add = _internal_mutable_values()->Add();
  // @@protoc_insertion_point(field_add:vortex.scalar.ListValue.values)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::vortex::scalar::ScalarValue>& ListValue::values() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:vortex.scalar.ListValue.values)
  return _internal_values();
}
inline const ::google::protobuf::RepeatedPtrField<::vortex::scalar::ScalarValue>&
ListValue::_internal_values() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.values_;
}
inline ::google::protobuf::RepeatedPtrField<::vortex::scalar::ScalarValue>*
ListValue::_internal_mutable_values() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.values_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace scalar
}  // namespace vortex


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_scalar_2eproto_2epb_2eh
