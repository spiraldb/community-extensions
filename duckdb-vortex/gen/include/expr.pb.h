// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: expr.proto
// Protobuf C++ Version: 5.29.3

#ifndef expr_2eproto_2epb_2eh
#define expr_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "scalar.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_expr_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_expr_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_expr_2eproto;
namespace vortex {
namespace expr {
class Expr;
struct ExprDefaultTypeInternal;
extern ExprDefaultTypeInternal _Expr_default_instance_;
class Kind;
struct KindDefaultTypeInternal;
extern KindDefaultTypeInternal _Kind_default_instance_;
class Kind_GetItem;
struct Kind_GetItemDefaultTypeInternal;
extern Kind_GetItemDefaultTypeInternal _Kind_GetItem_default_instance_;
class Kind_Identity;
struct Kind_IdentityDefaultTypeInternal;
extern Kind_IdentityDefaultTypeInternal _Kind_Identity_default_instance_;
class Kind_Literal;
struct Kind_LiteralDefaultTypeInternal;
extern Kind_LiteralDefaultTypeInternal _Kind_Literal_default_instance_;
class Kind_Merge;
struct Kind_MergeDefaultTypeInternal;
extern Kind_MergeDefaultTypeInternal _Kind_Merge_default_instance_;
class Kind_Not;
struct Kind_NotDefaultTypeInternal;
extern Kind_NotDefaultTypeInternal _Kind_Not_default_instance_;
class Kind_Pack;
struct Kind_PackDefaultTypeInternal;
extern Kind_PackDefaultTypeInternal _Kind_Pack_default_instance_;
}  // namespace expr
}  // namespace vortex
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace vortex {
namespace expr {
enum Kind_BinaryOp : int {
  Kind_BinaryOp_Eq = 0,
  Kind_BinaryOp_NotEq = 1,
  Kind_BinaryOp_Gt = 2,
  Kind_BinaryOp_Gte = 3,
  Kind_BinaryOp_Lt = 4,
  Kind_BinaryOp_Lte = 5,
  Kind_BinaryOp_And = 6,
  Kind_BinaryOp_Or = 7,
  Kind_BinaryOp_Kind_BinaryOp_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Kind_BinaryOp_Kind_BinaryOp_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Kind_BinaryOp_IsValid(int value);
extern const uint32_t Kind_BinaryOp_internal_data_[];
constexpr Kind_BinaryOp Kind_BinaryOp_BinaryOp_MIN = static_cast<Kind_BinaryOp>(0);
constexpr Kind_BinaryOp Kind_BinaryOp_BinaryOp_MAX = static_cast<Kind_BinaryOp>(7);
constexpr int Kind_BinaryOp_BinaryOp_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
Kind_BinaryOp_descriptor();
template <typename T>
const std::string& Kind_BinaryOp_Name(T value) {
  static_assert(std::is_same<T, Kind_BinaryOp>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to BinaryOp_Name().");
  return Kind_BinaryOp_Name(static_cast<Kind_BinaryOp>(value));
}
template <>
inline const std::string& Kind_BinaryOp_Name(Kind_BinaryOp value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Kind_BinaryOp_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool Kind_BinaryOp_Parse(absl::string_view name, Kind_BinaryOp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Kind_BinaryOp>(
      Kind_BinaryOp_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Kind_Pack final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:vortex.expr.Kind.Pack) */ {
 public:
  inline Kind_Pack() : Kind_Pack(nullptr) {}
  ~Kind_Pack() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Kind_Pack* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Kind_Pack));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Kind_Pack(
      ::google::protobuf::internal::ConstantInitialized);

  inline Kind_Pack(const Kind_Pack& from) : Kind_Pack(nullptr, from) {}
  inline Kind_Pack(Kind_Pack&& from) noexcept
      : Kind_Pack(nullptr, std::move(from)) {}
  inline Kind_Pack& operator=(const Kind_Pack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Kind_Pack& operator=(Kind_Pack&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Kind_Pack& default_instance() {
    return *internal_default_instance();
  }
  static inline const Kind_Pack* internal_default_instance() {
    return reinterpret_cast<const Kind_Pack*>(
        &_Kind_Pack_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(Kind_Pack& a, Kind_Pack& b) { a.Swap(&b); }
  inline void Swap(Kind_Pack* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Kind_Pack* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Kind_Pack* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Kind_Pack>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Kind_Pack& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Kind_Pack& from) { Kind_Pack::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Kind_Pack* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "vortex.expr.Kind.Pack"; }

 protected:
  explicit Kind_Pack(::google::protobuf::Arena* arena);
  Kind_Pack(::google::protobuf::Arena* arena, const Kind_Pack& from);
  Kind_Pack(::google::protobuf::Arena* arena, Kind_Pack&& from) noexcept
      : Kind_Pack(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPathsFieldNumber = 1,
  };
  // repeated string paths = 1;
  int paths_size() const;
  private:
  int _internal_paths_size() const;

  public:
  void clear_paths() ;
  const std::string& paths(int index) const;
  std::string* mutable_paths(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_paths(int index, Arg_&& value, Args_... args);
  std::string* add_paths();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_paths(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& paths() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_paths();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_paths() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_paths();

  public:
  // @@protoc_insertion_point(class_scope:vortex.expr.Kind.Pack)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      35, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Kind_Pack& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> paths_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_expr_2eproto;
};
// -------------------------------------------------------------------

class Kind_Not final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:vortex.expr.Kind.Not) */ {
 public:
  inline Kind_Not() : Kind_Not(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Kind_Not* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Kind_Not));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Kind_Not(
      ::google::protobuf::internal::ConstantInitialized);

  inline Kind_Not(const Kind_Not& from) : Kind_Not(nullptr, from) {}
  inline Kind_Not(Kind_Not&& from) noexcept
      : Kind_Not(nullptr, std::move(from)) {}
  inline Kind_Not& operator=(const Kind_Not& from) {
    CopyFrom(from);
    return *this;
  }
  inline Kind_Not& operator=(Kind_Not&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Kind_Not& default_instance() {
    return *internal_default_instance();
  }
  static inline const Kind_Not* internal_default_instance() {
    return reinterpret_cast<const Kind_Not*>(
        &_Kind_Not_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Kind_Not& a, Kind_Not& b) { a.Swap(&b); }
  inline void Swap(Kind_Not* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Kind_Not* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Kind_Not* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<Kind_Not>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Kind_Not& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Kind_Not& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "vortex.expr.Kind.Not"; }

 protected:
  explicit Kind_Not(::google::protobuf::Arena* arena);
  Kind_Not(::google::protobuf::Arena* arena, const Kind_Not& from);
  Kind_Not(::google::protobuf::Arena* arena, Kind_Not&& from) noexcept
      : Kind_Not(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:vortex.expr.Kind.Not)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Kind_Not& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_expr_2eproto;
};
// -------------------------------------------------------------------

class Kind_Merge final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:vortex.expr.Kind.Merge) */ {
 public:
  inline Kind_Merge() : Kind_Merge(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Kind_Merge* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Kind_Merge));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Kind_Merge(
      ::google::protobuf::internal::ConstantInitialized);

  inline Kind_Merge(const Kind_Merge& from) : Kind_Merge(nullptr, from) {}
  inline Kind_Merge(Kind_Merge&& from) noexcept
      : Kind_Merge(nullptr, std::move(from)) {}
  inline Kind_Merge& operator=(const Kind_Merge& from) {
    CopyFrom(from);
    return *this;
  }
  inline Kind_Merge& operator=(Kind_Merge&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Kind_Merge& default_instance() {
    return *internal_default_instance();
  }
  static inline const Kind_Merge* internal_default_instance() {
    return reinterpret_cast<const Kind_Merge*>(
        &_Kind_Merge_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(Kind_Merge& a, Kind_Merge& b) { a.Swap(&b); }
  inline void Swap(Kind_Merge* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Kind_Merge* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Kind_Merge* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<Kind_Merge>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Kind_Merge& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Kind_Merge& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "vortex.expr.Kind.Merge"; }

 protected:
  explicit Kind_Merge(::google::protobuf::Arena* arena);
  Kind_Merge(::google::protobuf::Arena* arena, const Kind_Merge& from);
  Kind_Merge(::google::protobuf::Arena* arena, Kind_Merge&& from) noexcept
      : Kind_Merge(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:vortex.expr.Kind.Merge)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Kind_Merge& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_expr_2eproto;
};
// -------------------------------------------------------------------

class Kind_Identity final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:vortex.expr.Kind.Identity) */ {
 public:
  inline Kind_Identity() : Kind_Identity(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Kind_Identity* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Kind_Identity));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Kind_Identity(
      ::google::protobuf::internal::ConstantInitialized);

  inline Kind_Identity(const Kind_Identity& from) : Kind_Identity(nullptr, from) {}
  inline Kind_Identity(Kind_Identity&& from) noexcept
      : Kind_Identity(nullptr, std::move(from)) {}
  inline Kind_Identity& operator=(const Kind_Identity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Kind_Identity& operator=(Kind_Identity&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Kind_Identity& default_instance() {
    return *internal_default_instance();
  }
  static inline const Kind_Identity* internal_default_instance() {
    return reinterpret_cast<const Kind_Identity*>(
        &_Kind_Identity_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Kind_Identity& a, Kind_Identity& b) { a.Swap(&b); }
  inline void Swap(Kind_Identity* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Kind_Identity* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Kind_Identity* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<Kind_Identity>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Kind_Identity& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Kind_Identity& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "vortex.expr.Kind.Identity"; }

 protected:
  explicit Kind_Identity(::google::protobuf::Arena* arena);
  Kind_Identity(::google::protobuf::Arena* arena, const Kind_Identity& from);
  Kind_Identity(::google::protobuf::Arena* arena, Kind_Identity&& from) noexcept
      : Kind_Identity(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:vortex.expr.Kind.Identity)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Kind_Identity& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_expr_2eproto;
};
// -------------------------------------------------------------------

class Kind_GetItem final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:vortex.expr.Kind.GetItem) */ {
 public:
  inline Kind_GetItem() : Kind_GetItem(nullptr) {}
  ~Kind_GetItem() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Kind_GetItem* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Kind_GetItem));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Kind_GetItem(
      ::google::protobuf::internal::ConstantInitialized);

  inline Kind_GetItem(const Kind_GetItem& from) : Kind_GetItem(nullptr, from) {}
  inline Kind_GetItem(Kind_GetItem&& from) noexcept
      : Kind_GetItem(nullptr, std::move(from)) {}
  inline Kind_GetItem& operator=(const Kind_GetItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline Kind_GetItem& operator=(Kind_GetItem&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Kind_GetItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const Kind_GetItem* internal_default_instance() {
    return reinterpret_cast<const Kind_GetItem*>(
        &_Kind_GetItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(Kind_GetItem& a, Kind_GetItem& b) { a.Swap(&b); }
  inline void Swap(Kind_GetItem* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Kind_GetItem* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Kind_GetItem* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Kind_GetItem>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Kind_GetItem& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Kind_GetItem& from) { Kind_GetItem::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Kind_GetItem* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "vortex.expr.Kind.GetItem"; }

 protected:
  explicit Kind_GetItem(::google::protobuf::Arena* arena);
  Kind_GetItem(::google::protobuf::Arena* arena, const Kind_GetItem& from);
  Kind_GetItem(::google::protobuf::Arena* arena, Kind_GetItem&& from) noexcept
      : Kind_GetItem(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* value);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // @@protoc_insertion_point(class_scope:vortex.expr.Kind.GetItem)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      37, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Kind_GetItem& from_msg);
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_expr_2eproto;
};
// -------------------------------------------------------------------

class Kind_Literal final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:vortex.expr.Kind.Literal) */ {
 public:
  inline Kind_Literal() : Kind_Literal(nullptr) {}
  ~Kind_Literal() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Kind_Literal* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Kind_Literal));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Kind_Literal(
      ::google::protobuf::internal::ConstantInitialized);

  inline Kind_Literal(const Kind_Literal& from) : Kind_Literal(nullptr, from) {}
  inline Kind_Literal(Kind_Literal&& from) noexcept
      : Kind_Literal(nullptr, std::move(from)) {}
  inline Kind_Literal& operator=(const Kind_Literal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Kind_Literal& operator=(Kind_Literal&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Kind_Literal& default_instance() {
    return *internal_default_instance();
  }
  static inline const Kind_Literal* internal_default_instance() {
    return reinterpret_cast<const Kind_Literal*>(
        &_Kind_Literal_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Kind_Literal& a, Kind_Literal& b) { a.Swap(&b); }
  inline void Swap(Kind_Literal* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Kind_Literal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Kind_Literal* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Kind_Literal>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Kind_Literal& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Kind_Literal& from) { Kind_Literal::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Kind_Literal* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "vortex.expr.Kind.Literal"; }

 protected:
  explicit Kind_Literal(::google::protobuf::Arena* arena);
  Kind_Literal(::google::protobuf::Arena* arena, const Kind_Literal& from);
  Kind_Literal(::google::protobuf::Arena* arena, Kind_Literal&& from) noexcept
      : Kind_Literal(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValueFieldNumber = 1,
  };
  // .vortex.scalar.Scalar value = 1;
  bool has_value() const;
  void clear_value() ;
  const ::vortex::scalar::Scalar& value() const;
  PROTOBUF_NODISCARD ::vortex::scalar::Scalar* release_value();
  ::vortex::scalar::Scalar* mutable_value();
  void set_allocated_value(::vortex::scalar::Scalar* value);
  void unsafe_arena_set_allocated_value(::vortex::scalar::Scalar* value);
  ::vortex::scalar::Scalar* unsafe_arena_release_value();

  private:
  const ::vortex::scalar::Scalar& _internal_value() const;
  ::vortex::scalar::Scalar* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:vortex.expr.Kind.Literal)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Kind_Literal& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::vortex::scalar::Scalar* value_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_expr_2eproto;
};
// -------------------------------------------------------------------

class Kind final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:vortex.expr.Kind) */ {
 public:
  inline Kind() : Kind(nullptr) {}
  ~Kind() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Kind* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Kind));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Kind(
      ::google::protobuf::internal::ConstantInitialized);

  inline Kind(const Kind& from) : Kind(nullptr, from) {}
  inline Kind(Kind&& from) noexcept
      : Kind(nullptr, std::move(from)) {}
  inline Kind& operator=(const Kind& from) {
    CopyFrom(from);
    return *this;
  }
  inline Kind& operator=(Kind&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Kind& default_instance() {
    return *internal_default_instance();
  }
  enum KindCase {
    kLiteral = 1,
    kBinaryOp = 2,
    kGetItem = 3,
    kIdentity = 4,
    kMerge = 5,
    kNot = 6,
    kPack = 7,
    KIND_NOT_SET = 0,
  };
  static inline const Kind* internal_default_instance() {
    return reinterpret_cast<const Kind*>(
        &_Kind_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(Kind& a, Kind& b) { a.Swap(&b); }
  inline void Swap(Kind* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Kind* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Kind* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Kind>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Kind& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Kind& from) { Kind::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Kind* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "vortex.expr.Kind"; }

 protected:
  explicit Kind(::google::protobuf::Arena* arena);
  Kind(::google::protobuf::Arena* arena, const Kind& from);
  Kind(::google::protobuf::Arena* arena, Kind&& from) noexcept
      : Kind(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Literal = Kind_Literal;
  using Not = Kind_Not;
  using Identity = Kind_Identity;
  using Merge = Kind_Merge;
  using Pack = Kind_Pack;
  using GetItem = Kind_GetItem;
  using BinaryOp = Kind_BinaryOp;
  static constexpr BinaryOp Eq = Kind_BinaryOp_Eq;
  static constexpr BinaryOp NotEq = Kind_BinaryOp_NotEq;
  static constexpr BinaryOp Gt = Kind_BinaryOp_Gt;
  static constexpr BinaryOp Gte = Kind_BinaryOp_Gte;
  static constexpr BinaryOp Lt = Kind_BinaryOp_Lt;
  static constexpr BinaryOp Lte = Kind_BinaryOp_Lte;
  static constexpr BinaryOp And = Kind_BinaryOp_And;
  static constexpr BinaryOp Or = Kind_BinaryOp_Or;
  static inline bool BinaryOp_IsValid(int value) {
    return Kind_BinaryOp_IsValid(value);
  }
  static constexpr BinaryOp BinaryOp_MIN = Kind_BinaryOp_BinaryOp_MIN;
  static constexpr BinaryOp BinaryOp_MAX = Kind_BinaryOp_BinaryOp_MAX;
  static constexpr int BinaryOp_ARRAYSIZE = Kind_BinaryOp_BinaryOp_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* BinaryOp_descriptor() {
    return Kind_BinaryOp_descriptor();
  }
  template <typename T>
  static inline const std::string& BinaryOp_Name(T value) {
    return Kind_BinaryOp_Name(value);
  }
  static inline bool BinaryOp_Parse(absl::string_view name, BinaryOp* value) {
    return Kind_BinaryOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kLiteralFieldNumber = 1,
    kBinaryOpFieldNumber = 2,
    kGetItemFieldNumber = 3,
    kIdentityFieldNumber = 4,
    kMergeFieldNumber = 5,
    kNotFieldNumber = 6,
    kPackFieldNumber = 7,
  };
  // .vortex.expr.Kind.Literal literal = 1;
  bool has_literal() const;
  private:
  bool _internal_has_literal() const;

  public:
  void clear_literal() ;
  const ::vortex::expr::Kind_Literal& literal() const;
  PROTOBUF_NODISCARD ::vortex::expr::Kind_Literal* release_literal();
  ::vortex::expr::Kind_Literal* mutable_literal();
  void set_allocated_literal(::vortex::expr::Kind_Literal* value);
  void unsafe_arena_set_allocated_literal(::vortex::expr::Kind_Literal* value);
  ::vortex::expr::Kind_Literal* unsafe_arena_release_literal();

  private:
  const ::vortex::expr::Kind_Literal& _internal_literal() const;
  ::vortex::expr::Kind_Literal* _internal_mutable_literal();

  public:
  // .vortex.expr.Kind.BinaryOp binary_op = 2;
  bool has_binary_op() const;
  void clear_binary_op() ;
  ::vortex::expr::Kind_BinaryOp binary_op() const;
  void set_binary_op(::vortex::expr::Kind_BinaryOp value);

  private:
  ::vortex::expr::Kind_BinaryOp _internal_binary_op() const;
  void _internal_set_binary_op(::vortex::expr::Kind_BinaryOp value);

  public:
  // .vortex.expr.Kind.GetItem get_item = 3;
  bool has_get_item() const;
  private:
  bool _internal_has_get_item() const;

  public:
  void clear_get_item() ;
  const ::vortex::expr::Kind_GetItem& get_item() const;
  PROTOBUF_NODISCARD ::vortex::expr::Kind_GetItem* release_get_item();
  ::vortex::expr::Kind_GetItem* mutable_get_item();
  void set_allocated_get_item(::vortex::expr::Kind_GetItem* value);
  void unsafe_arena_set_allocated_get_item(::vortex::expr::Kind_GetItem* value);
  ::vortex::expr::Kind_GetItem* unsafe_arena_release_get_item();

  private:
  const ::vortex::expr::Kind_GetItem& _internal_get_item() const;
  ::vortex::expr::Kind_GetItem* _internal_mutable_get_item();

  public:
  // .vortex.expr.Kind.Identity identity = 4;
  bool has_identity() const;
  private:
  bool _internal_has_identity() const;

  public:
  void clear_identity() ;
  const ::vortex::expr::Kind_Identity& identity() const;
  PROTOBUF_NODISCARD ::vortex::expr::Kind_Identity* release_identity();
  ::vortex::expr::Kind_Identity* mutable_identity();
  void set_allocated_identity(::vortex::expr::Kind_Identity* value);
  void unsafe_arena_set_allocated_identity(::vortex::expr::Kind_Identity* value);
  ::vortex::expr::Kind_Identity* unsafe_arena_release_identity();

  private:
  const ::vortex::expr::Kind_Identity& _internal_identity() const;
  ::vortex::expr::Kind_Identity* _internal_mutable_identity();

  public:
  // .vortex.expr.Kind.Merge merge = 5;
  bool has_merge() const;
  private:
  bool _internal_has_merge() const;

  public:
  void clear_merge() ;
  const ::vortex::expr::Kind_Merge& merge() const;
  PROTOBUF_NODISCARD ::vortex::expr::Kind_Merge* release_merge();
  ::vortex::expr::Kind_Merge* mutable_merge();
  void set_allocated_merge(::vortex::expr::Kind_Merge* value);
  void unsafe_arena_set_allocated_merge(::vortex::expr::Kind_Merge* value);
  ::vortex::expr::Kind_Merge* unsafe_arena_release_merge();

  private:
  const ::vortex::expr::Kind_Merge& _internal_merge() const;
  ::vortex::expr::Kind_Merge* _internal_mutable_merge();

  public:
  // .vortex.expr.Kind.Not not = 6;
  bool has_not_() const;
  private:
  bool _internal_has_not_() const;

  public:
  void clear_not_() ;
  const ::vortex::expr::Kind_Not& not_() const;
  PROTOBUF_NODISCARD ::vortex::expr::Kind_Not* release_not_();
  ::vortex::expr::Kind_Not* mutable_not_();
  void set_allocated_not_(::vortex::expr::Kind_Not* value);
  void unsafe_arena_set_allocated_not_(::vortex::expr::Kind_Not* value);
  ::vortex::expr::Kind_Not* unsafe_arena_release_not_();

  private:
  const ::vortex::expr::Kind_Not& _internal_not_() const;
  ::vortex::expr::Kind_Not* _internal_mutable_not_();

  public:
  // .vortex.expr.Kind.Pack pack = 7;
  bool has_pack() const;
  private:
  bool _internal_has_pack() const;

  public:
  void clear_pack() ;
  const ::vortex::expr::Kind_Pack& pack() const;
  PROTOBUF_NODISCARD ::vortex::expr::Kind_Pack* release_pack();
  ::vortex::expr::Kind_Pack* mutable_pack();
  void set_allocated_pack(::vortex::expr::Kind_Pack* value);
  void unsafe_arena_set_allocated_pack(::vortex::expr::Kind_Pack* value);
  ::vortex::expr::Kind_Pack* unsafe_arena_release_pack();

  private:
  const ::vortex::expr::Kind_Pack& _internal_pack() const;
  ::vortex::expr::Kind_Pack* _internal_mutable_pack();

  public:
  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:vortex.expr.Kind)
 private:
  class _Internal;
  void set_has_literal();
  void set_has_binary_op();
  void set_has_get_item();
  void set_has_identity();
  void set_has_merge();
  void set_has_not_();
  void set_has_pack();
  inline bool has_kind() const;
  inline void clear_has_kind();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 7, 6,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Kind& from_msg);
    union KindUnion {
      constexpr KindUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::vortex::expr::Kind_Literal* literal_;
      int binary_op_;
      ::vortex::expr::Kind_GetItem* get_item_;
      ::vortex::expr::Kind_Identity* identity_;
      ::vortex::expr::Kind_Merge* merge_;
      ::vortex::expr::Kind_Not* not__;
      ::vortex::expr::Kind_Pack* pack_;
    } kind_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_expr_2eproto;
};
// -------------------------------------------------------------------

class Expr final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:vortex.expr.Expr) */ {
 public:
  inline Expr() : Expr(nullptr) {}
  ~Expr() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Expr* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Expr));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Expr(
      ::google::protobuf::internal::ConstantInitialized);

  inline Expr(const Expr& from) : Expr(nullptr, from) {}
  inline Expr(Expr&& from) noexcept
      : Expr(nullptr, std::move(from)) {}
  inline Expr& operator=(const Expr& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expr& operator=(Expr&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expr& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expr* internal_default_instance() {
    return reinterpret_cast<const Expr*>(
        &_Expr_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Expr& a, Expr& b) { a.Swap(&b); }
  inline void Swap(Expr* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expr* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expr* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Expr>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Expr& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Expr& from) { Expr::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Expr* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "vortex.expr.Expr"; }

 protected:
  explicit Expr(::google::protobuf::Arena* arena);
  Expr(::google::protobuf::Arena* arena, const Expr& from);
  Expr(::google::protobuf::Arena* arena, Expr&& from) noexcept
      : Expr(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kChildrenFieldNumber = 2,
    kIdFieldNumber = 1,
    kKindFieldNumber = 3,
  };
  // repeated .vortex.expr.Expr children = 2;
  int children_size() const;
  private:
  int _internal_children_size() const;

  public:
  void clear_children() ;
  ::vortex::expr::Expr* mutable_children(int index);
  ::google::protobuf::RepeatedPtrField<::vortex::expr::Expr>* mutable_children();

  private:
  const ::google::protobuf::RepeatedPtrField<::vortex::expr::Expr>& _internal_children() const;
  ::google::protobuf::RepeatedPtrField<::vortex::expr::Expr>* _internal_mutable_children();
  public:
  const ::vortex::expr::Expr& children(int index) const;
  ::vortex::expr::Expr* add_children();
  const ::google::protobuf::RepeatedPtrField<::vortex::expr::Expr>& children() const;
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // .vortex.expr.Kind kind = 3;
  bool has_kind() const;
  void clear_kind() ;
  const ::vortex::expr::Kind& kind() const;
  PROTOBUF_NODISCARD ::vortex::expr::Kind* release_kind();
  ::vortex::expr::Kind* mutable_kind();
  void set_allocated_kind(::vortex::expr::Kind* value);
  void unsafe_arena_set_allocated_kind(::vortex::expr::Kind* value);
  ::vortex::expr::Kind* unsafe_arena_release_kind();

  private:
  const ::vortex::expr::Kind& _internal_kind() const;
  ::vortex::expr::Kind* _internal_mutable_kind();

  public:
  // @@protoc_insertion_point(class_scope:vortex.expr.Expr)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      27, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Expr& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::vortex::expr::Expr > children_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::vortex::expr::Kind* kind_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_expr_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Expr

// string id = 1;
inline void Expr::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Expr::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vortex.expr.Expr.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Expr::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:vortex.expr.Expr.id)
}
inline std::string* Expr::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:vortex.expr.Expr.id)
  return _s;
}
inline const std::string& Expr::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void Expr::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* Expr::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* Expr::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:vortex.expr.Expr.id)
  return _impl_.id_.Release();
}
inline void Expr::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:vortex.expr.Expr.id)
}

// repeated .vortex.expr.Expr children = 2;
inline int Expr::_internal_children_size() const {
  return _internal_children().size();
}
inline int Expr::children_size() const {
  return _internal_children_size();
}
inline void Expr::clear_children() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.children_.Clear();
}
inline ::vortex::expr::Expr* Expr::mutable_children(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:vortex.expr.Expr.children)
  return _internal_mutable_children()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::vortex::expr::Expr>* Expr::mutable_children()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:vortex.expr.Expr.children)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_children();
}
inline const ::vortex::expr::Expr& Expr::children(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vortex.expr.Expr.children)
  return _internal_children().Get(index);
}
inline ::vortex::expr::Expr* Expr::add_children() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::vortex::expr::Expr* _add = _internal_mutable_children()->Add();
  // @@protoc_insertion_point(field_add:vortex.expr.Expr.children)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::vortex::expr::Expr>& Expr::children() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:vortex.expr.Expr.children)
  return _internal_children();
}
inline const ::google::protobuf::RepeatedPtrField<::vortex::expr::Expr>&
Expr::_internal_children() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.children_;
}
inline ::google::protobuf::RepeatedPtrField<::vortex::expr::Expr>*
Expr::_internal_mutable_children() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.children_;
}

// .vortex.expr.Kind kind = 3;
inline bool Expr::has_kind() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.kind_ != nullptr);
  return value;
}
inline void Expr::clear_kind() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.kind_ != nullptr) _impl_.kind_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::vortex::expr::Kind& Expr::_internal_kind() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::vortex::expr::Kind* p = _impl_.kind_;
  return p != nullptr ? *p : reinterpret_cast<const ::vortex::expr::Kind&>(::vortex::expr::_Kind_default_instance_);
}
inline const ::vortex::expr::Kind& Expr::kind() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vortex.expr.Expr.kind)
  return _internal_kind();
}
inline void Expr::unsafe_arena_set_allocated_kind(::vortex::expr::Kind* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kind_);
  }
  _impl_.kind_ = reinterpret_cast<::vortex::expr::Kind*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vortex.expr.Expr.kind)
}
inline ::vortex::expr::Kind* Expr::release_kind() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::vortex::expr::Kind* released = _impl_.kind_;
  _impl_.kind_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::vortex::expr::Kind* Expr::unsafe_arena_release_kind() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:vortex.expr.Expr.kind)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::vortex::expr::Kind* temp = _impl_.kind_;
  _impl_.kind_ = nullptr;
  return temp;
}
inline ::vortex::expr::Kind* Expr::_internal_mutable_kind() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.kind_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::vortex::expr::Kind>(GetArena());
    _impl_.kind_ = reinterpret_cast<::vortex::expr::Kind*>(p);
  }
  return _impl_.kind_;
}
inline ::vortex::expr::Kind* Expr::mutable_kind() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::vortex::expr::Kind* _msg = _internal_mutable_kind();
  // @@protoc_insertion_point(field_mutable:vortex.expr.Expr.kind)
  return _msg;
}
inline void Expr::set_allocated_kind(::vortex::expr::Kind* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.kind_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.kind_ = reinterpret_cast<::vortex::expr::Kind*>(value);
  // @@protoc_insertion_point(field_set_allocated:vortex.expr.Expr.kind)
}

// -------------------------------------------------------------------

// Kind_Literal

// .vortex.scalar.Scalar value = 1;
inline bool Kind_Literal::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_ != nullptr);
  return value;
}
inline const ::vortex::scalar::Scalar& Kind_Literal::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::vortex::scalar::Scalar* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::vortex::scalar::Scalar&>(::vortex::scalar::_Scalar_default_instance_);
}
inline const ::vortex::scalar::Scalar& Kind_Literal::value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vortex.expr.Kind.Literal.value)
  return _internal_value();
}
inline void Kind_Literal::unsafe_arena_set_allocated_value(::vortex::scalar::Scalar* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = reinterpret_cast<::vortex::scalar::Scalar*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vortex.expr.Kind.Literal.value)
}
inline ::vortex::scalar::Scalar* Kind_Literal::release_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::vortex::scalar::Scalar* released = _impl_.value_;
  _impl_.value_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::vortex::scalar::Scalar* Kind_Literal::unsafe_arena_release_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:vortex.expr.Kind.Literal.value)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::vortex::scalar::Scalar* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::vortex::scalar::Scalar* Kind_Literal::_internal_mutable_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.value_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::vortex::scalar::Scalar>(GetArena());
    _impl_.value_ = reinterpret_cast<::vortex::scalar::Scalar*>(p);
  }
  return _impl_.value_;
}
inline ::vortex::scalar::Scalar* Kind_Literal::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::vortex::scalar::Scalar* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:vortex.expr.Kind.Literal.value)
  return _msg;
}
inline void Kind_Literal::set_allocated_value(::vortex::scalar::Scalar* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.value_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.value_ = reinterpret_cast<::vortex::scalar::Scalar*>(value);
  // @@protoc_insertion_point(field_set_allocated:vortex.expr.Kind.Literal.value)
}

// -------------------------------------------------------------------

// Kind_Not

// -------------------------------------------------------------------

// Kind_Identity

// -------------------------------------------------------------------

// Kind_Merge

// -------------------------------------------------------------------

// Kind_Pack

// repeated string paths = 1;
inline int Kind_Pack::_internal_paths_size() const {
  return _internal_paths().size();
}
inline int Kind_Pack::paths_size() const {
  return _internal_paths_size();
}
inline void Kind_Pack::clear_paths() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.paths_.Clear();
}
inline std::string* Kind_Pack::add_paths() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_paths()->Add();
  // @@protoc_insertion_point(field_add_mutable:vortex.expr.Kind.Pack.paths)
  return _s;
}
inline const std::string& Kind_Pack::paths(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vortex.expr.Kind.Pack.paths)
  return _internal_paths().Get(index);
}
inline std::string* Kind_Pack::mutable_paths(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:vortex.expr.Kind.Pack.paths)
  return _internal_mutable_paths()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void Kind_Pack::set_paths(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_paths()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:vortex.expr.Kind.Pack.paths)
}
template <typename Arg_, typename... Args_>
inline void Kind_Pack::add_paths(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_paths(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:vortex.expr.Kind.Pack.paths)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Kind_Pack::paths() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:vortex.expr.Kind.Pack.paths)
  return _internal_paths();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Kind_Pack::mutable_paths() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:vortex.expr.Kind.Pack.paths)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_paths();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Kind_Pack::_internal_paths() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.paths_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Kind_Pack::_internal_mutable_paths() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.paths_;
}

// -------------------------------------------------------------------

// Kind_GetItem

// string path = 1;
inline void Kind_GetItem::clear_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.ClearToEmpty();
}
inline const std::string& Kind_GetItem::path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vortex.expr.Kind.GetItem.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Kind_GetItem::set_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:vortex.expr.Kind.GetItem.path)
}
inline std::string* Kind_GetItem::mutable_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:vortex.expr.Kind.GetItem.path)
  return _s;
}
inline const std::string& Kind_GetItem::_internal_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.path_.Get();
}
inline void Kind_GetItem::_internal_set_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.Set(value, GetArena());
}
inline std::string* Kind_GetItem::_internal_mutable_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.path_.Mutable( GetArena());
}
inline std::string* Kind_GetItem::release_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:vortex.expr.Kind.GetItem.path)
  return _impl_.path_.Release();
}
inline void Kind_GetItem::set_allocated_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:vortex.expr.Kind.GetItem.path)
}

// -------------------------------------------------------------------

// Kind

// .vortex.expr.Kind.Literal literal = 1;
inline bool Kind::has_literal() const {
  return kind_case() == kLiteral;
}
inline bool Kind::_internal_has_literal() const {
  return kind_case() == kLiteral;
}
inline void Kind::set_has_literal() {
  _impl_._oneof_case_[0] = kLiteral;
}
inline void Kind::clear_literal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (kind_case() == kLiteral) {
    if (GetArena() == nullptr) {
      delete _impl_.kind_.literal_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.kind_.literal_);
    }
    clear_has_kind();
  }
}
inline ::vortex::expr::Kind_Literal* Kind::release_literal() {
  // @@protoc_insertion_point(field_release:vortex.expr.Kind.literal)
  if (kind_case() == kLiteral) {
    clear_has_kind();
    auto* temp = _impl_.kind_.literal_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.literal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vortex::expr::Kind_Literal& Kind::_internal_literal() const {
  return kind_case() == kLiteral ? *_impl_.kind_.literal_ : reinterpret_cast<::vortex::expr::Kind_Literal&>(::vortex::expr::_Kind_Literal_default_instance_);
}
inline const ::vortex::expr::Kind_Literal& Kind::literal() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vortex.expr.Kind.literal)
  return _internal_literal();
}
inline ::vortex::expr::Kind_Literal* Kind::unsafe_arena_release_literal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vortex.expr.Kind.literal)
  if (kind_case() == kLiteral) {
    clear_has_kind();
    auto* temp = _impl_.kind_.literal_;
    _impl_.kind_.literal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Kind::unsafe_arena_set_allocated_literal(::vortex::expr::Kind_Literal* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_kind();
  if (value) {
    set_has_literal();
    _impl_.kind_.literal_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vortex.expr.Kind.literal)
}
inline ::vortex::expr::Kind_Literal* Kind::_internal_mutable_literal() {
  if (kind_case() != kLiteral) {
    clear_kind();
    set_has_literal();
    _impl_.kind_.literal_ =
        ::google::protobuf::Message::DefaultConstruct<::vortex::expr::Kind_Literal>(GetArena());
  }
  return _impl_.kind_.literal_;
}
inline ::vortex::expr::Kind_Literal* Kind::mutable_literal() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::vortex::expr::Kind_Literal* _msg = _internal_mutable_literal();
  // @@protoc_insertion_point(field_mutable:vortex.expr.Kind.literal)
  return _msg;
}

// .vortex.expr.Kind.BinaryOp binary_op = 2;
inline bool Kind::has_binary_op() const {
  return kind_case() == kBinaryOp;
}
inline void Kind::set_has_binary_op() {
  _impl_._oneof_case_[0] = kBinaryOp;
}
inline void Kind::clear_binary_op() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (kind_case() == kBinaryOp) {
    _impl_.kind_.binary_op_ = 0;
    clear_has_kind();
  }
}
inline ::vortex::expr::Kind_BinaryOp Kind::binary_op() const {
  // @@protoc_insertion_point(field_get:vortex.expr.Kind.binary_op)
  return _internal_binary_op();
}
inline void Kind::set_binary_op(::vortex::expr::Kind_BinaryOp value) {
  if (kind_case() != kBinaryOp) {
    clear_kind();
    set_has_binary_op();
  }
  _impl_.kind_.binary_op_ = value;
  // @@protoc_insertion_point(field_set:vortex.expr.Kind.binary_op)
}
inline ::vortex::expr::Kind_BinaryOp Kind::_internal_binary_op() const {
  if (kind_case() == kBinaryOp) {
    return static_cast<::vortex::expr::Kind_BinaryOp>(_impl_.kind_.binary_op_);
  }
  return static_cast<::vortex::expr::Kind_BinaryOp>(0);
}

// .vortex.expr.Kind.GetItem get_item = 3;
inline bool Kind::has_get_item() const {
  return kind_case() == kGetItem;
}
inline bool Kind::_internal_has_get_item() const {
  return kind_case() == kGetItem;
}
inline void Kind::set_has_get_item() {
  _impl_._oneof_case_[0] = kGetItem;
}
inline void Kind::clear_get_item() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (kind_case() == kGetItem) {
    if (GetArena() == nullptr) {
      delete _impl_.kind_.get_item_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.kind_.get_item_);
    }
    clear_has_kind();
  }
}
inline ::vortex::expr::Kind_GetItem* Kind::release_get_item() {
  // @@protoc_insertion_point(field_release:vortex.expr.Kind.get_item)
  if (kind_case() == kGetItem) {
    clear_has_kind();
    auto* temp = _impl_.kind_.get_item_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.get_item_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vortex::expr::Kind_GetItem& Kind::_internal_get_item() const {
  return kind_case() == kGetItem ? *_impl_.kind_.get_item_ : reinterpret_cast<::vortex::expr::Kind_GetItem&>(::vortex::expr::_Kind_GetItem_default_instance_);
}
inline const ::vortex::expr::Kind_GetItem& Kind::get_item() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vortex.expr.Kind.get_item)
  return _internal_get_item();
}
inline ::vortex::expr::Kind_GetItem* Kind::unsafe_arena_release_get_item() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vortex.expr.Kind.get_item)
  if (kind_case() == kGetItem) {
    clear_has_kind();
    auto* temp = _impl_.kind_.get_item_;
    _impl_.kind_.get_item_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Kind::unsafe_arena_set_allocated_get_item(::vortex::expr::Kind_GetItem* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_kind();
  if (value) {
    set_has_get_item();
    _impl_.kind_.get_item_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vortex.expr.Kind.get_item)
}
inline ::vortex::expr::Kind_GetItem* Kind::_internal_mutable_get_item() {
  if (kind_case() != kGetItem) {
    clear_kind();
    set_has_get_item();
    _impl_.kind_.get_item_ =
        ::google::protobuf::Message::DefaultConstruct<::vortex::expr::Kind_GetItem>(GetArena());
  }
  return _impl_.kind_.get_item_;
}
inline ::vortex::expr::Kind_GetItem* Kind::mutable_get_item() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::vortex::expr::Kind_GetItem* _msg = _internal_mutable_get_item();
  // @@protoc_insertion_point(field_mutable:vortex.expr.Kind.get_item)
  return _msg;
}

// .vortex.expr.Kind.Identity identity = 4;
inline bool Kind::has_identity() const {
  return kind_case() == kIdentity;
}
inline bool Kind::_internal_has_identity() const {
  return kind_case() == kIdentity;
}
inline void Kind::set_has_identity() {
  _impl_._oneof_case_[0] = kIdentity;
}
inline void Kind::clear_identity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (kind_case() == kIdentity) {
    if (GetArena() == nullptr) {
      delete _impl_.kind_.identity_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.kind_.identity_);
    }
    clear_has_kind();
  }
}
inline ::vortex::expr::Kind_Identity* Kind::release_identity() {
  // @@protoc_insertion_point(field_release:vortex.expr.Kind.identity)
  if (kind_case() == kIdentity) {
    clear_has_kind();
    auto* temp = _impl_.kind_.identity_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.identity_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vortex::expr::Kind_Identity& Kind::_internal_identity() const {
  return kind_case() == kIdentity ? *_impl_.kind_.identity_ : reinterpret_cast<::vortex::expr::Kind_Identity&>(::vortex::expr::_Kind_Identity_default_instance_);
}
inline const ::vortex::expr::Kind_Identity& Kind::identity() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vortex.expr.Kind.identity)
  return _internal_identity();
}
inline ::vortex::expr::Kind_Identity* Kind::unsafe_arena_release_identity() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vortex.expr.Kind.identity)
  if (kind_case() == kIdentity) {
    clear_has_kind();
    auto* temp = _impl_.kind_.identity_;
    _impl_.kind_.identity_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Kind::unsafe_arena_set_allocated_identity(::vortex::expr::Kind_Identity* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_kind();
  if (value) {
    set_has_identity();
    _impl_.kind_.identity_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vortex.expr.Kind.identity)
}
inline ::vortex::expr::Kind_Identity* Kind::_internal_mutable_identity() {
  if (kind_case() != kIdentity) {
    clear_kind();
    set_has_identity();
    _impl_.kind_.identity_ =
        ::google::protobuf::Message::DefaultConstruct<::vortex::expr::Kind_Identity>(GetArena());
  }
  return _impl_.kind_.identity_;
}
inline ::vortex::expr::Kind_Identity* Kind::mutable_identity() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::vortex::expr::Kind_Identity* _msg = _internal_mutable_identity();
  // @@protoc_insertion_point(field_mutable:vortex.expr.Kind.identity)
  return _msg;
}

// .vortex.expr.Kind.Merge merge = 5;
inline bool Kind::has_merge() const {
  return kind_case() == kMerge;
}
inline bool Kind::_internal_has_merge() const {
  return kind_case() == kMerge;
}
inline void Kind::set_has_merge() {
  _impl_._oneof_case_[0] = kMerge;
}
inline void Kind::clear_merge() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (kind_case() == kMerge) {
    if (GetArena() == nullptr) {
      delete _impl_.kind_.merge_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.kind_.merge_);
    }
    clear_has_kind();
  }
}
inline ::vortex::expr::Kind_Merge* Kind::release_merge() {
  // @@protoc_insertion_point(field_release:vortex.expr.Kind.merge)
  if (kind_case() == kMerge) {
    clear_has_kind();
    auto* temp = _impl_.kind_.merge_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.merge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vortex::expr::Kind_Merge& Kind::_internal_merge() const {
  return kind_case() == kMerge ? *_impl_.kind_.merge_ : reinterpret_cast<::vortex::expr::Kind_Merge&>(::vortex::expr::_Kind_Merge_default_instance_);
}
inline const ::vortex::expr::Kind_Merge& Kind::merge() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vortex.expr.Kind.merge)
  return _internal_merge();
}
inline ::vortex::expr::Kind_Merge* Kind::unsafe_arena_release_merge() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vortex.expr.Kind.merge)
  if (kind_case() == kMerge) {
    clear_has_kind();
    auto* temp = _impl_.kind_.merge_;
    _impl_.kind_.merge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Kind::unsafe_arena_set_allocated_merge(::vortex::expr::Kind_Merge* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_kind();
  if (value) {
    set_has_merge();
    _impl_.kind_.merge_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vortex.expr.Kind.merge)
}
inline ::vortex::expr::Kind_Merge* Kind::_internal_mutable_merge() {
  if (kind_case() != kMerge) {
    clear_kind();
    set_has_merge();
    _impl_.kind_.merge_ =
        ::google::protobuf::Message::DefaultConstruct<::vortex::expr::Kind_Merge>(GetArena());
  }
  return _impl_.kind_.merge_;
}
inline ::vortex::expr::Kind_Merge* Kind::mutable_merge() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::vortex::expr::Kind_Merge* _msg = _internal_mutable_merge();
  // @@protoc_insertion_point(field_mutable:vortex.expr.Kind.merge)
  return _msg;
}

// .vortex.expr.Kind.Not not = 6;
inline bool Kind::has_not_() const {
  return kind_case() == kNot;
}
inline bool Kind::_internal_has_not_() const {
  return kind_case() == kNot;
}
inline void Kind::set_has_not_() {
  _impl_._oneof_case_[0] = kNot;
}
inline void Kind::clear_not_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (kind_case() == kNot) {
    if (GetArena() == nullptr) {
      delete _impl_.kind_.not__;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.kind_.not__);
    }
    clear_has_kind();
  }
}
inline ::vortex::expr::Kind_Not* Kind::release_not_() {
  // @@protoc_insertion_point(field_release:vortex.expr.Kind.not)
  if (kind_case() == kNot) {
    clear_has_kind();
    auto* temp = _impl_.kind_.not__;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.not__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vortex::expr::Kind_Not& Kind::_internal_not_() const {
  return kind_case() == kNot ? *_impl_.kind_.not__ : reinterpret_cast<::vortex::expr::Kind_Not&>(::vortex::expr::_Kind_Not_default_instance_);
}
inline const ::vortex::expr::Kind_Not& Kind::not_() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vortex.expr.Kind.not)
  return _internal_not_();
}
inline ::vortex::expr::Kind_Not* Kind::unsafe_arena_release_not_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vortex.expr.Kind.not)
  if (kind_case() == kNot) {
    clear_has_kind();
    auto* temp = _impl_.kind_.not__;
    _impl_.kind_.not__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Kind::unsafe_arena_set_allocated_not_(::vortex::expr::Kind_Not* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_kind();
  if (value) {
    set_has_not_();
    _impl_.kind_.not__ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vortex.expr.Kind.not)
}
inline ::vortex::expr::Kind_Not* Kind::_internal_mutable_not_() {
  if (kind_case() != kNot) {
    clear_kind();
    set_has_not_();
    _impl_.kind_.not__ =
        ::google::protobuf::Message::DefaultConstruct<::vortex::expr::Kind_Not>(GetArena());
  }
  return _impl_.kind_.not__;
}
inline ::vortex::expr::Kind_Not* Kind::mutable_not_() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::vortex::expr::Kind_Not* _msg = _internal_mutable_not_();
  // @@protoc_insertion_point(field_mutable:vortex.expr.Kind.not)
  return _msg;
}

// .vortex.expr.Kind.Pack pack = 7;
inline bool Kind::has_pack() const {
  return kind_case() == kPack;
}
inline bool Kind::_internal_has_pack() const {
  return kind_case() == kPack;
}
inline void Kind::set_has_pack() {
  _impl_._oneof_case_[0] = kPack;
}
inline void Kind::clear_pack() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (kind_case() == kPack) {
    if (GetArena() == nullptr) {
      delete _impl_.kind_.pack_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.kind_.pack_);
    }
    clear_has_kind();
  }
}
inline ::vortex::expr::Kind_Pack* Kind::release_pack() {
  // @@protoc_insertion_point(field_release:vortex.expr.Kind.pack)
  if (kind_case() == kPack) {
    clear_has_kind();
    auto* temp = _impl_.kind_.pack_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.pack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vortex::expr::Kind_Pack& Kind::_internal_pack() const {
  return kind_case() == kPack ? *_impl_.kind_.pack_ : reinterpret_cast<::vortex::expr::Kind_Pack&>(::vortex::expr::_Kind_Pack_default_instance_);
}
inline const ::vortex::expr::Kind_Pack& Kind::pack() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vortex.expr.Kind.pack)
  return _internal_pack();
}
inline ::vortex::expr::Kind_Pack* Kind::unsafe_arena_release_pack() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vortex.expr.Kind.pack)
  if (kind_case() == kPack) {
    clear_has_kind();
    auto* temp = _impl_.kind_.pack_;
    _impl_.kind_.pack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Kind::unsafe_arena_set_allocated_pack(::vortex::expr::Kind_Pack* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_kind();
  if (value) {
    set_has_pack();
    _impl_.kind_.pack_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vortex.expr.Kind.pack)
}
inline ::vortex::expr::Kind_Pack* Kind::_internal_mutable_pack() {
  if (kind_case() != kPack) {
    clear_kind();
    set_has_pack();
    _impl_.kind_.pack_ =
        ::google::protobuf::Message::DefaultConstruct<::vortex::expr::Kind_Pack>(GetArena());
  }
  return _impl_.kind_.pack_;
}
inline ::vortex::expr::Kind_Pack* Kind::mutable_pack() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::vortex::expr::Kind_Pack* _msg = _internal_mutable_pack();
  // @@protoc_insertion_point(field_mutable:vortex.expr.Kind.pack)
  return _msg;
}

inline bool Kind::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void Kind::clear_has_kind() {
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}
inline Kind::KindCase Kind::kind_case() const {
  return Kind::KindCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace expr
}  // namespace vortex


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::vortex::expr::Kind_BinaryOp> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::vortex::expr::Kind_BinaryOp>() {
  return ::vortex::expr::Kind_BinaryOp_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // expr_2eproto_2epb_2eh
