// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use crate::layout::*;
use crate::scalar::*;
use crate::array::*;
use crate::dtype::*;
use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

/// A `Segment` acts as the locator for a buffer within the file.
// struct Segment, aligned to 8
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct Segment(pub [u8; 16]);
impl Default for Segment { 
  fn default() -> Self { 
    Self([0; 16])
  }
}
impl core::fmt::Debug for Segment {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("Segment")
      .field("offset", &self.offset())
      .field("length", &self.length())
      .field("alignment_exponent", &self.alignment_exponent())
      .field("_compression", &self._compression())
      .field("_encryption", &self._encryption())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Segment {}
impl<'a> flatbuffers::Follow<'a> for Segment {
  type Inner = &'a Segment;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Segment>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Segment {
  type Inner = &'a Segment;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Segment>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Segment {
    type Output = Segment;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const Segment as *const u8, <Self as flatbuffers::Push>::size());
        dst.copy_from_slice(src);
    }
    #[inline]
    fn alignment() -> flatbuffers::PushAlignment {
        flatbuffers::PushAlignment::new(8)
    }
}

impl<'a> flatbuffers::Verifiable for Segment {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> Segment {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    offset: u64,
    length: u32,
    alignment_exponent: u8,
    _compression: u8,
    _encryption: u16,
  ) -> Self {
    let mut s = Self([0; 16]);
    s.set_offset(offset);
    s.set_length(length);
    s.set_alignment_exponent(alignment_exponent);
    s.set__compression(_compression);
    s.set__encryption(_encryption);
    s
  }

  pub fn offset(&self) -> u64 {
    let mut mem = core::mem::MaybeUninit::<<u64 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<u64 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_offset(&mut self, x: u64) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<u64 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn length(&self) -> u32 {
    let mut mem = core::mem::MaybeUninit::<<u32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[8..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<u32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_length(&mut self, x: u32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[8..].as_mut_ptr(),
        core::mem::size_of::<<u32 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn alignment_exponent(&self) -> u8 {
    let mut mem = core::mem::MaybeUninit::<<u8 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[12..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<u8 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_alignment_exponent(&mut self, x: u8) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[12..].as_mut_ptr(),
        core::mem::size_of::<<u8 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn _compression(&self) -> u8 {
    let mut mem = core::mem::MaybeUninit::<<u8 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[13..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<u8 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set__compression(&mut self, x: u8) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[13..].as_mut_ptr(),
        core::mem::size_of::<<u8 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn _encryption(&self) -> u16 {
    let mut mem = core::mem::MaybeUninit::<<u16 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[14..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<u16 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set__encryption(&mut self, x: u16) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[14..].as_mut_ptr(),
        core::mem::size_of::<<u16 as EndianScalar>::Scalar>(),
      );
    }
  }

}

pub enum FooterOffset {}
#[derive(Copy, Clone, PartialEq)]

/// The `Footer` stores the root `Layout` as well as location information for each referenced segment.
pub struct Footer<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Footer<'a> {
  type Inner = Footer<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Footer<'a> {
  pub const VT_LAYOUT: flatbuffers::VOffsetT = 4;
  pub const VT_SEGMENTS: flatbuffers::VOffsetT = 6;
  pub const VT_STATISTICS: flatbuffers::VOffsetT = 8;
  pub const VT_ARRAY_ENCODINGS: flatbuffers::VOffsetT = 10;
  pub const VT_LAYOUT_ENCODINGS: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Footer { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args FooterArgs<'args>
  ) -> flatbuffers::WIPOffset<Footer<'bldr>> {
    let mut builder = FooterBuilder::new(_fbb);
    if let Some(x) = args.layout_encodings { builder.add_layout_encodings(x); }
    if let Some(x) = args.array_encodings { builder.add_array_encodings(x); }
    if let Some(x) = args.statistics { builder.add_statistics(x); }
    if let Some(x) = args.segments { builder.add_segments(x); }
    if let Some(x) = args.layout { builder.add_layout(x); }
    builder.finish()
  }


  #[inline]
  pub fn layout(&self) -> Option<Layout<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<Layout>>(Footer::VT_LAYOUT, None)}
  }
  #[inline]
  pub fn segments(&self) -> Option<flatbuffers::Vector<'a, Segment>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Segment>>>(Footer::VT_SEGMENTS, None)}
  }
  #[inline]
  pub fn statistics(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ArrayStats<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ArrayStats>>>>(Footer::VT_STATISTICS, None)}
  }
  #[inline]
  pub fn array_encodings(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ArrayEncoding<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ArrayEncoding>>>>(Footer::VT_ARRAY_ENCODINGS, None)}
  }
  #[inline]
  pub fn layout_encodings(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<LayoutEncoding<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<LayoutEncoding>>>>(Footer::VT_LAYOUT_ENCODINGS, None)}
  }
}

impl flatbuffers::Verifiable for Footer<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<Layout>>("layout", Self::VT_LAYOUT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Segment>>>("segments", Self::VT_SEGMENTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<ArrayStats>>>>("statistics", Self::VT_STATISTICS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<ArrayEncoding>>>>("array_encodings", Self::VT_ARRAY_ENCODINGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<LayoutEncoding>>>>("layout_encodings", Self::VT_LAYOUT_ENCODINGS, false)?
     .finish();
    Ok(())
  }
}
pub struct FooterArgs<'a> {
    pub layout: Option<flatbuffers::WIPOffset<Layout<'a>>>,
    pub segments: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Segment>>>,
    pub statistics: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ArrayStats<'a>>>>>,
    pub array_encodings: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ArrayEncoding<'a>>>>>,
    pub layout_encodings: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<LayoutEncoding<'a>>>>>,
}
impl<'a> Default for FooterArgs<'a> {
  #[inline]
  fn default() -> Self {
    FooterArgs {
      layout: None,
      segments: None,
      statistics: None,
      array_encodings: None,
      layout_encodings: None,
    }
  }
}

pub struct FooterBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FooterBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_layout(&mut self, layout: flatbuffers::WIPOffset<Layout<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<Layout>>(Footer::VT_LAYOUT, layout);
  }
  #[inline]
  pub fn add_segments(&mut self, segments: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Segment>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Footer::VT_SEGMENTS, segments);
  }
  #[inline]
  pub fn add_statistics(&mut self, statistics: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<ArrayStats<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Footer::VT_STATISTICS, statistics);
  }
  #[inline]
  pub fn add_array_encodings(&mut self, array_encodings: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<ArrayEncoding<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Footer::VT_ARRAY_ENCODINGS, array_encodings);
  }
  #[inline]
  pub fn add_layout_encodings(&mut self, layout_encodings: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<LayoutEncoding<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Footer::VT_LAYOUT_ENCODINGS, layout_encodings);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FooterBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    FooterBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Footer<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Footer<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Footer");
      ds.field("layout", &self.layout());
      ds.field("segments", &self.segments());
      ds.field("statistics", &self.statistics());
      ds.field("array_encodings", &self.array_encodings());
      ds.field("layout_encodings", &self.layout_encodings());
      ds.finish()
  }
}
pub enum ArrayEncodingOffset {}
#[derive(Copy, Clone, PartialEq)]

/// An `ArrayEncoding` describes the type of a particular array.
///
/// These are identified by a globally unique string identifier, and looked up in the Vortex registry
/// at read-time.
pub struct ArrayEncoding<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ArrayEncoding<'a> {
  type Inner = ArrayEncoding<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ArrayEncoding<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ArrayEncoding { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ArrayEncodingArgs<'args>
  ) -> flatbuffers::WIPOffset<ArrayEncoding<'bldr>> {
    let mut builder = ArrayEncodingBuilder::new(_fbb);
    if let Some(x) = args.id { builder.add_id(x); }
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ArrayEncoding::VT_ID, None).unwrap()}
  }
}

impl flatbuffers::Verifiable for ArrayEncoding<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, true)?
     .finish();
    Ok(())
  }
}
pub struct ArrayEncodingArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for ArrayEncodingArgs<'a> {
  #[inline]
  fn default() -> Self {
    ArrayEncodingArgs {
      id: None, // required field
    }
  }
}

pub struct ArrayEncodingBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ArrayEncodingBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ArrayEncoding::VT_ID, id);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ArrayEncodingBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ArrayEncodingBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ArrayEncoding<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, ArrayEncoding::VT_ID,"id");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ArrayEncoding<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ArrayEncoding");
      ds.field("id", &self.id());
      ds.finish()
  }
}
pub enum LayoutEncodingOffset {}
#[derive(Copy, Clone, PartialEq)]

/// A `LayoutEncoding` describes the type of a particular layout.
///
/// These are identified by a globally unique string identifier, and looked up in the Vortex registry
/// at read-time.
pub struct LayoutEncoding<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for LayoutEncoding<'a> {
  type Inner = LayoutEncoding<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> LayoutEncoding<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    LayoutEncoding { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args LayoutEncodingArgs<'args>
  ) -> flatbuffers::WIPOffset<LayoutEncoding<'bldr>> {
    let mut builder = LayoutEncodingBuilder::new(_fbb);
    if let Some(x) = args.id { builder.add_id(x); }
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LayoutEncoding::VT_ID, None).unwrap()}
  }
}

impl flatbuffers::Verifiable for LayoutEncoding<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, true)?
     .finish();
    Ok(())
  }
}
pub struct LayoutEncodingArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for LayoutEncodingArgs<'a> {
  #[inline]
  fn default() -> Self {
    LayoutEncodingArgs {
      id: None, // required field
    }
  }
}

pub struct LayoutEncodingBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> LayoutEncodingBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LayoutEncoding::VT_ID, id);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> LayoutEncodingBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    LayoutEncodingBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<LayoutEncoding<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, LayoutEncoding::VT_ID,"id");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for LayoutEncoding<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("LayoutEncoding");
      ds.field("id", &self.id());
      ds.finish()
  }
}
pub enum PostscriptOffset {}
#[derive(Copy, Clone, PartialEq)]

/// The `Postscript` is guaranteed by the file format to never exceed
/// 65528 bytes (i.e., u16::MAX - 8 bytes) in length, and is immediately
/// followed by an 8-byte `EndOfFile` struct.
/// The initial read of a Vortex file is always at least 64KB (u16::MAX bytes) and therefore
/// is guaranteed to cover at least the Postscript.
pub struct Postscript<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Postscript<'a> {
  type Inner = Postscript<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Postscript<'a> {
  pub const VT_DTYPE: flatbuffers::VOffsetT = 4;
  pub const VT_FOOTER: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Postscript { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args PostscriptArgs<'args>
  ) -> flatbuffers::WIPOffset<Postscript<'bldr>> {
    let mut builder = PostscriptBuilder::new(_fbb);
    if let Some(x) = args.footer { builder.add_footer(x); }
    if let Some(x) = args.dtype { builder.add_dtype(x); }
    builder.finish()
  }


  #[inline]
  pub fn dtype(&self) -> Option<&'a Segment> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Segment>(Postscript::VT_DTYPE, None)}
  }
  #[inline]
  pub fn footer(&self) -> Option<&'a Segment> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Segment>(Postscript::VT_FOOTER, None)}
  }
}

impl flatbuffers::Verifiable for Postscript<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<Segment>("dtype", Self::VT_DTYPE, false)?
     .visit_field::<Segment>("footer", Self::VT_FOOTER, false)?
     .finish();
    Ok(())
  }
}
pub struct PostscriptArgs<'a> {
    pub dtype: Option<&'a Segment>,
    pub footer: Option<&'a Segment>,
}
impl<'a> Default for PostscriptArgs<'a> {
  #[inline]
  fn default() -> Self {
    PostscriptArgs {
      dtype: None,
      footer: None,
    }
  }
}

pub struct PostscriptBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PostscriptBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_dtype(&mut self, dtype: &Segment) {
    self.fbb_.push_slot_always::<&Segment>(Postscript::VT_DTYPE, dtype);
  }
  #[inline]
  pub fn add_footer(&mut self, footer: &Segment) {
    self.fbb_.push_slot_always::<&Segment>(Postscript::VT_FOOTER, footer);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> PostscriptBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    PostscriptBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Postscript<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Postscript<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Postscript");
      ds.field("dtype", &self.dtype());
      ds.field("footer", &self.footer());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Postscript`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_postscript_unchecked`.
pub fn root_as_postscript(buf: &[u8]) -> Result<Postscript, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Postscript>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Postscript` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_postscript_unchecked`.
pub fn size_prefixed_root_as_postscript(buf: &[u8]) -> Result<Postscript, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Postscript>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Postscript` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_postscript_unchecked`.
pub fn root_as_postscript_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Postscript<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Postscript<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Postscript` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_postscript_unchecked`.
pub fn size_prefixed_root_as_postscript_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Postscript<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Postscript<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Postscript and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Postscript`.
pub unsafe fn root_as_postscript_unchecked(buf: &[u8]) -> Postscript {
  flatbuffers::root_unchecked::<Postscript>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Postscript and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Postscript`.
pub unsafe fn size_prefixed_root_as_postscript_unchecked(buf: &[u8]) -> Postscript {
  flatbuffers::size_prefixed_root_unchecked::<Postscript>(buf)
}
#[inline]
pub fn finish_postscript_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<Postscript<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_postscript_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<Postscript<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
