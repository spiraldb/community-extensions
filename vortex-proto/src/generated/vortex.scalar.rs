// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DecimalValue {
    #[prost(oneof = "decimal_value::Value", tags = "1, 2, 3, 4, 5, 6")]
    pub value: ::core::option::Option<decimal_value::Value>,
}
/// Nested message and enum types in `DecimalValue`.
pub mod decimal_value {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Value {
        #[prost(bytes, tag = "1")]
        I8LittleEndian(::prost::alloc::vec::Vec<u8>),
        #[prost(bytes, tag = "2")]
        I16LittleEndian(::prost::alloc::vec::Vec<u8>),
        #[prost(bytes, tag = "3")]
        I32LittleEndian(::prost::alloc::vec::Vec<u8>),
        #[prost(bytes, tag = "4")]
        I64LittleEndian(::prost::alloc::vec::Vec<u8>),
        #[prost(bytes, tag = "5")]
        I128LittleEndian(::prost::alloc::vec::Vec<u8>),
        #[prost(bytes, tag = "6")]
        I256LittleEndian(::prost::alloc::vec::Vec<u8>),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Scalar {
    #[prost(message, optional, tag = "1")]
    pub dtype: ::core::option::Option<super::dtype::DType>,
    #[prost(message, optional, tag = "2")]
    pub value: ::core::option::Option<ScalarValue>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScalarValue {
    #[prost(
        oneof = "scalar_value::Kind",
        tags = "1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17"
    )]
    pub kind: ::core::option::Option<scalar_value::Kind>,
}
/// Nested message and enum types in `ScalarValue`.
pub mod scalar_value {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Kind {
        #[prost(enumeration = "::prost_types::NullValue", tag = "1")]
        NullValue(i32),
        #[prost(bool, tag = "2")]
        BoolValue(bool),
        #[prost(sint32, tag = "3")]
        Int8Value(i32),
        #[prost(sint32, tag = "4")]
        Int16Value(i32),
        #[prost(sint32, tag = "5")]
        Int32Value(i32),
        #[prost(sint64, tag = "6")]
        Int64Value(i64),
        #[prost(uint32, tag = "7")]
        Uint8Value(u32),
        #[prost(uint32, tag = "8")]
        Uint16Value(u32),
        #[prost(uint32, tag = "9")]
        Uint32Value(u32),
        #[prost(uint64, tag = "10")]
        Uint64Value(u64),
        /// two bytes
        #[prost(uint32, tag = "11")]
        F16Value(u32),
        #[prost(float, tag = "12")]
        F32Value(f32),
        #[prost(double, tag = "13")]
        F64Value(f64),
        #[prost(string, tag = "14")]
        StringValue(::prost::alloc::string::String),
        #[prost(bytes, tag = "15")]
        BytesValue(::prost::alloc::vec::Vec<u8>),
        #[prost(message, tag = "16")]
        ListValue(super::ListValue),
        #[prost(message, tag = "17")]
        DecimalValue(super::DecimalValue),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListValue {
    #[prost(message, repeated, tag = "1")]
    pub values: ::prost::alloc::vec::Vec<ScalarValue>,
}
