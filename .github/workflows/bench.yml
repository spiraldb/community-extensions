name: Benchmarks

env:
  DUCKDB_VERSION: v1.2.2

on:
  push:
    branches: [ develop ]

permissions:
  id-token: write  # enables AWS-GitHub OIDC
  actions: read
  contents: write
  deployments: write

jobs:
  commit-metadata:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"
      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::375504701696:role/GitHubBenchmarkRole
          aws-region: us-east-1
      - name: Upload Commit Metadata
        shell: bash
        run: |
          set -Eeu -o pipefail -x

          sudo apt-get update && sudo apt-get install -y jq
          bash scripts/commit-json.sh > new-commit.json
          bash scripts/cat-s3.sh vortex-benchmark-results-database commits.json new-commit.json

  build-duckdb:
    runs-on:
      - runs-on=${{ github.run_id }}
      - family=c6id.8xlarge
      - image=ubuntu24-full-x64
      - spot=false
      - tag=${{ matrix.id }}
    steps:
      - uses: runs-on/action@v1
      - name: Cache duckdb compiled binary
        uses: runs-on/cache@v4
        id: cache-duckdb-binary
        with:
          key: "${{ runner.os }}-duckdb-linux_amd64-${{ env.DUCKDB_VERSION }}"
          path: ${{ github.workspace }}/duckdb/build/release/duckdb

      - name: Install duckdb compile requirements
        if: steps.cache-duckdb-binary.outputs.cache-hit != 'true'
        run: sudo apt-get update && sudo apt-get install ninja-build cmake build-essential make ccache clang -y

      - name: Build duckdb binary
        if: steps.cache-duckdb-binary.outputs.cache-hit != 'true'
        env:
          CC: clang
          CXX: clang++
          GEN: ninja
          NATIVE_ARCH: 1
          DUCKDB_PLATFORM: linux_amd64
          LTO: thin
        run: |
          git clone https://github.com/duckdb/duckdb
          cd duckdb
          git checkout "$DUCKDB_VERSION"
          make release

  bench:
    needs: build-duckdb
    runs-on:
      - runs-on=${{ github.run_id }}
      - family=c6id.8xlarge
      - image=ubuntu24-full-x64
      - spot=false
      - tag=${{ matrix.benchmark.id }}
    strategy:
      matrix:
        benchmark:
          - id: random_access
            name: Random Access
          - id: compress
            name: Compression
    steps:
      - uses: runs-on/action@v1
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Cache duckdb compiled binary
        uses: runs-on/cache@v4
        id: cache-duckdb-binary
        with:
          fail-on-cache-miss: true
          key: "${{ runner.os }}-duckdb-linux_amd64-${{ env.DUCKDB_VERSION }}"
          path: ${{ github.workspace }}/duckdb/build/release/duckdb

      - name: Add duckdb to path
        run: |
          echo "${{ github.workspace }}/duckdb/build/release/" >> $GITHUB_PATH

      # cat-s3 script uses gzip to append to compressed benchmark results
      # TODO(joe): remove ninja once duckdb is not built by the benchmark
      - name: Install gzip
        run: sudo apt-get update && sudo apt-get install -y gzip ninja-build

      # rustup is pre-installed on the ubuntu24-full-x64 image.
      - name: Run ${{ matrix.benchmark.name }} benchmark
        shell: bash
        env:
          RUSTFLAGS: '-C target-cpu=native'
        run: |
          cargo run --bin ${{ matrix.benchmark.id }} --package bench-vortex --release -- -d gh-json | tee ${{ matrix.benchmark.id }}.json

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::375504701696:role/GitHubBenchmarkRole
          aws-region: us-east-1
      - name: Upload Benchmark Results
        shell: bash
        run: |
          bash scripts/cat-s3.sh vortex-benchmark-results-database data.json.gz ${{ matrix.benchmark.id }}.json
  sql:
    uses: ./.github/workflows/sql-benchmarks.yml
    secrets: inherit
    with:
      mode: 'develop'
