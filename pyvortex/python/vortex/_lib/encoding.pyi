from typing import final

import vortex as vx

@final
class NullEncoding(vx.Array): ...

@final
class BoolEncoding(vx.Array): ...

@final
class PrimitiveEncoding(vx.Array): ...

@final
class VarBinEncoding(vx.Array): ...

@final
class VarBinViewEncoding(vx.Array): ...

@final
class StructEncoding(vx.Array):
    def field(self, name: str) -> vx.Array: ...

@final
class ListEncoding(vx.Array): ...

@final
class ExtensionEncoding(vx.Array): ...

class PyEncoding(vx.Array): ...

@final
class ConstantEncoding(vx.Array):
    def scalar(self) -> vx.Scalar: ...

@final
class ChunkedEncoding(vx.Array):
    def chunks(self) -> list[vx.Array]: ...

@final
class AlpEncoding(vx.Array): ...

@final
class AlpRdEncoding(vx.Array): ...

@final
class DateTimePartsEncoding(vx.Array): ...

@final
class DictEncoding(vx.Array): ...

@final
class FsstEncoding(vx.Array): ...

@final
class RunEndEncoding(vx.Array): ...

@final
class SparseEncoding(vx.Array): ...

@final
class ZigZagEncoding(vx.Array): ...

@final
class FastLanesBitPackedEncoding(vx.Array):
    @property
    def bit_width(self) -> int: ...

@final
class FastLanesDeltaEncoding(vx.Array): ...

@final
class FastLanesFoREncoding(vx.Array): ...
